From: <Saved by Blink>
Snapshot-Content-Location: https://tldp.org/LDP/abs/html/internal.html
Subject: Internal Commands and Builtins
Date: Mon, 5 Oct 2020 20:44:49 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--0nBzcJsifzsNPRQQvEP6qo4aYXSQJv2izPdiq0y2LX----"


------MultipartBoundary--0nBzcJsifzsNPRQQvEP6qo4aYXSQJv2izPdiq0y2LX----
Content-Type: text/html
Content-ID: <frame-5566EC436FEF0BB5ED85BBEAA07C5C2B@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://tldp.org/LDP/abs/html/internal.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><=
meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dwindows-12=
52"><title>Internal Commands and Builtins</title><meta name=3D"GENERATOR" c=
ontent=3D"Modular DocBook HTML Stylesheet Version 1.7"><link rel=3D"HOME" t=
itle=3D"Advanced Bash-Scripting Guide" href=3D"https://tldp.org/LDP/abs/htm=
l/index.html"><link rel=3D"UP" title=3D"Commands" href=3D"https://tldp.org/=
LDP/abs/html/part4.html"><link rel=3D"PREVIOUS" title=3D"Commands" href=3D"=
https://tldp.org/LDP/abs/html/part4.html"><link rel=3D"NEXT" title=3D"Job C=
ontrol Commands" href=3D"https://tldp.org/LDP/abs/html/x9644.html"></head><=
body class=3D"CHAPTER" bgcolor=3D"#FFFFFF" text=3D"#000000" link=3D"#0000FF=
" vlink=3D"#840084" alink=3D"#0000FF"><div class=3D"NAVHEADER"><table summa=
ry=3D"Header navigation table" width=3D"100%" border=3D"0" cellpadding=3D"0=
" cellspacing=3D"0"><tbody><tr><th colspan=3D"3" align=3D"center">Advanced =
Bash-Scripting Guide: </th></tr><tr><td width=3D"10%" align=3D"left" valign=
=3D"bottom"><a href=3D"https://tldp.org/LDP/abs/html/part4.html" accesskey=
=3D"P">Prev</a></td><td width=3D"80%" align=3D"center" valign=3D"bottom"></=
td><td width=3D"10%" align=3D"right" valign=3D"bottom"><a href=3D"https://t=
ldp.org/LDP/abs/html/x9644.html" accesskey=3D"N">Next</a></td></tr></tbody>=
</table><hr align=3D"LEFT" width=3D"100%"></div><div class=3D"CHAPTER"><h1>=
<a name=3D"INTERNAL"></a>Chapter 15. Internal Commands and Builtins</h1><p>=
<a name=3D"BUILTINREF"></a>A <i class=3D"FIRSTTERM">builtin</i>
	is a <b class=3D"COMMAND">command</b> contained within the Bash tool
	set, literally <i class=3D"FIRSTTERM">built in</i>. This is either
	for performance reasons -- builtins execute faster than external
	commands, which usually require <i class=3D"FIRSTTERM">forking off</i>
	  <a name=3D"AEN8607" href=3D"https://tldp.org/LDP/abs/html/internal.html#=
FTN.AEN8607"><span class=3D"footnote">[1]</span></a>
	a separate process -- or because a particular builtin needs
	direct access to the shell internals.</p><p><a name=3D"FORKREF"></a></p><t=
able class=3D"SIDEBAR" border=3D"1" cellpadding=3D"5"><tbody><tr><td><div c=
lass=3D"SIDEBAR"><a name=3D"AEN8611"></a><p></p><p><a name=3D"PARENTREF"></=
a>When a command or
		   the shell itself initiates (or
		   <i class=3D"FIRSTTERM">spawns</i>) a new
		   subprocess to carry out a task, this is called
		   <i class=3D"FIRSTTERM">forking</i>. This new process
		   is the <i class=3D"FIRSTTERM">child</i>, and the process
		   that <i class=3D"FIRSTTERM">forked</i> it off is the
		   <i class=3D"FIRSTTERM">parent</i>. While the <i class=3D"FIRSTTERM">ch=
ild
		   process</i> is doing its work, the
		   <i class=3D"FIRSTTERM">parent process</i> is still
		   executing.</p><p>Note that while a <i class=3D"FIRSTTERM">parent
		   process</i> gets the <i class=3D"FIRSTTERM">process
		   ID</i> of the <i class=3D"FIRSTTERM">child
		   process</i>, and can thus pass arguments to it,
		   <em>the reverse is not true</em>. <a href=3D"https://tldp.org/LDP/abs/=
html/gotchas.html#PARCHILDPROBREF">This can create problems
		   that are subtle and hard to track down.</a></p><div class=3D"EXAMPLE">=
<a name=3D"SPAWNSCR"></a><p><b>Example 15-1. A script that spawns multiple =
instances of itself</b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D=
"100%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING"=
>#!/bin/bash
# spawn.sh


PIDS=3D$(pidof sh $0)  # Process IDs of the various instances of this scrip=
t.
P_array=3D( $PIDS )    # Put them in an array (why?).
echo $PIDS           # Show process IDs of parent and child processes.
let "instances =3D ${#P_array[*]} - 1"  # Count elements, less 1.
                                      # Why subtract 1?
echo "$instances instance(s) of this script running."
echo "[Hit Ctl-C to exit.]"; echo


sleep 1              # Wait.
sh $0                # Play it again, Sam.

exit 0               # Not necessary; script will never get to here.
                     # Why not?

#  After exiting with a Ctl-C,
#+ do all the spawned instances of the script die?
#  If so, why?

# Note:
# ----
# Be careful not to run this script too long.
# It will eventually eat up too many system resources.

#  Is having a script spawn multiple instances of itself
#+ an advisable scripting technique.
#  Why or why not?</pre></font></td></tr></tbody></table></div><p><a name=
=3D"BLTINFRK"></a></p><p>Generally, a Bash <i class=3D"FIRSTTERM">builtin</=
i>
		   does not fork a subprocess when it executes within
		   a script. An external system command or filter in
		   a script usually <em>will</em> fork a
		   subprocess.</p><p></p></div></td></tr></tbody></table><p>A builtin may=
 be a synonym to a system command of the same
	name, but Bash reimplements it internally.  For example,
	the Bash <b class=3D"COMMAND">echo</b> command is not the same as
	<tt class=3D"FILENAME">/bin/echo</tt>, although their behavior is
	almost identical.
	   <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"100%"><tbody><tr><td><=
font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash

echo "This line uses the \"echo\" builtin."
/bin/echo "This line uses the /bin/echo system command."</pre></font></td><=
/tr></tbody></table>
	</p><p><a name=3D"KEYWORDREF"></a>A <i class=3D"FIRSTTERM">keyword</i>
	is a <i class=3D"FIRSTTERM">reserved</i> word, token or
	operator. Keywords have a special meaning to the shell,
	and indeed are the building blocks of the shell's
	syntax. As examples, <i class=3D"FIRSTTERM">for</i>,
	<i class=3D"FIRSTTERM">while</i>, <i class=3D"FIRSTTERM">do</i>,
	and <i class=3D"FIRSTTERM">!</i> are keywords. Similar to a <a href=3D"htt=
ps://tldp.org/LDP/abs/html/internal.html#BUILTINREF">builtin</a>, a keyword=
 is hard-coded into
	Bash, but unlike a <i class=3D"FIRSTTERM">builtin</i>, a keyword is
	not in itself a command, but <em>a subunit of a command
	construct</em>.

	   <a name=3D"AEN8650" href=3D"https://tldp.org/LDP/abs/html/internal.html=
#FTN.AEN8650"><span class=3D"footnote">[2]</span></a>

	</p><p></p><div class=3D"VARIABLELIST"><p><b><a name=3D"INTIO1"></a>I/O</b=
></p><dl><dt><a name=3D"ECHOREF"></a><b class=3D"COMMAND">echo</b></dt><dd>=
<p>prints (to <tt class=3D"FILENAME">stdout</tt>) an expression
	      or variable (see <a href=3D"https://tldp.org/LDP/abs/html/varsubn.ht=
ml#EX9">Example 4-1</a>).=20
	      <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td=
><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">echo Hello
echo $a</pre></font></td></tr></tbody></table></p><p>An <b class=3D"COMMAND=
">echo</b> requires the
	      <tt class=3D"OPTION">-e</tt> option to print escaped characters. See
	      <a href=3D"https://tldp.org/LDP/abs/html/escapingsection.html#ESCAPE=
D">Example 5-2</a>.</p><p>Normally, each <b class=3D"COMMAND">echo</b> comm=
and prints
	      a terminal newline, but the <tt class=3D"OPTION">-n</tt> option
	      suppresses this.</p><p><a name=3D"ECHOGREPREF"></a></p><div class=3D=
"NOTE"><p></p><table class=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><=
td width=3D"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.or=
g/LDP/abs/images/note.gif" hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT=
" valign=3D"TOP"><p>An <b class=3D"COMMAND">echo</b> can be used to feed a
	      sequence of commands down a pipe.</p><p><table border=3D"0" bgcolor=
=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre clas=
s=3D"PROGRAMLISTING">if echo "$VAR" | grep -q txt   # if [[ $VAR =3D *txt* =
]]
then
  echo "$VAR contains the substring sequence \"txt\""
fi</pre></font></td></tr></tbody></table></p></td></tr></tbody></table></di=
v><p><a name=3D"ECHOCS"></a></p><div class=3D"NOTE"><p></p><table class=3D"=
NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=3D"CENTE=
R" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/note.gif" hsp=
ace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D"TOP"><p>An <b clas=
s=3D"COMMAND">echo</b>, in combination with
	      <a href=3D"https://tldp.org/LDP/abs/html/commandsub.html#COMMANDSUBR=
EF">command substitution</a>
	      can set a variable.</p><p><tt class=3D"USERINPUT"><b>a=3D`echo
	      "HELLO" | tr A-Z a-z`</b></tt></p><p>See also <a href=3D"https://tld=
p.org/LDP/abs/html/textproc.html#LOWERCASE">Example 16-22</a>, <a href=3D"h=
ttps://tldp.org/LDP/abs/html/moreadv.html#EX57">Example 16-3</a>, <a href=
=3D"https://tldp.org/LDP/abs/html/mathc.html#MONTHLYPMT">Example 16-47</a>,=
 and <a href=3D"https://tldp.org/LDP/abs/html/mathc.html#BASE">Example 16-4=
8</a>.</p></td></tr></tbody></table></div><p>Be aware that <b class=3D"COMM=
AND">echo `command`</b>
	      deletes any linefeeds that the output
	      of <tt class=3D"REPLACEABLE"><i>command</i></tt>
	      generates.</p><p>The <a href=3D"https://tldp.org/LDP/abs/html/intern=
alvariables.html#IFSREF">$IFS</a> (internal field
	      separator) variable normally contains
	      <span class=3D"TOKEN">\n</span> (linefeed) as one of its set of
	      <a href=3D"https://tldp.org/LDP/abs/html/special-chars.html#WHITESPA=
CEREF">whitespace</a>
	      characters. Bash therefore splits the output of
	      <tt class=3D"REPLACEABLE"><i>command</i></tt> at linefeeds
	      into arguments to <b class=3D"COMMAND">echo</b>.  Then
	      <b class=3D"COMMAND">echo</b> outputs these arguments,
	      separated by spaces.</p><p>	      <table border=3D"1" bgcolor=3D"#E0=
E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"SC=
REEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>ls -l /usr=
/share/apps/kjezz/sounds</b></tt>
<tt class=3D"COMPUTEROUTPUT">-rw-r--r--    1 root     root         1407 Nov=
  7  2000 reflect.au
 -rw-r--r--    1 root     root          362 Nov  7  2000 seconds.au</tt>




<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>echo `ls -l /usr=
/share/apps/kjezz/sounds`</b></tt>
<tt class=3D"COMPUTEROUTPUT">total 40 -rw-r--r-- 1 root root 716 Nov 7 2000=
 reflect.au -rw-r--r-- 1 root root ...</tt>
	      </pre></font></td></tr></tbody></table>
	    </p><p>              So, how can we embed a linefeed within an
	      <a href=3D"https://tldp.org/LDP/abs/html/internal.html#ECHOREF">echo=
ed</a> character string?

	     <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td>=
<font color=3D"#000000"><pre class=3D"PROGRAMLISTING"># Embedding a linefee=
d?
echo "Why doesn't this string \n split on two lines?"
# Doesn't split.

# Let's try something else.

echo
	    =20
echo $"A line of text containing
a linefeed."
# Prints as two distinct lines (embedded linefeed).
# But, is the "$" variable prefix really necessary?

echo

echo "This string splits
on two lines."
# No, the "$" is not needed.

echo
echo "---------------"
echo

echo -n $"Another line of text containing
a linefeed."
# Prints as two distinct lines (embedded linefeed).
# Even the -n option fails to suppress the linefeed here.

echo
echo
echo "---------------"
echo
echo

# However, the following doesn't work as expected.
# Why not? Hint: Assignment to a variable.
string1=3D$"Yet another line of text containing
a linefeed (maybe)."

echo $string1
# Yet another line of text containing a linefeed (maybe).
#                                    ^
# Linefeed becomes a space.

# Thanks, Steve Parker, for pointing this out.</pre></font></td></tr></tbod=
y></table>
            </p><p><a name=3D"BINECHO"></a></p><div class=3D"NOTE"><p></p><=
table class=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25"=
 align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/image=
s/note.gif" hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D"TOP=
"><p>This command is a shell builtin, and not the same as
	      <tt class=3D"FILENAME">/bin/echo</tt>, although its behavior is
	      similar.</p><p>	      <table border=3D"1" bgcolor=3D"#E0E0E0" width=
=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"SCREEN"><tt c=
lass=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>type -a echo</b></tt>
<tt class=3D"COMPUTEROUTPUT">echo is a shell builtin
 echo is /bin/echo</tt>
	      </pre></font></td></tr></tbody></table>
	  </p></td></tr></tbody></table></div></dd><dt><a name=3D"PRINTFREF"></a><=
b class=3D"COMMAND">printf</b></dt><dd><p>The <b class=3D"COMMAND">printf</=
b>, formatted print, command is an
	      enhanced <b class=3D"COMMAND">echo</b>. It is a limited variant
	      of the <i class=3D"FIRSTTERM">C</i> language
	      <tt class=3D"FUNCTION">printf()</tt> library function, and its
	      syntax is somewhat different.</p><p><b class=3D"COMMAND">printf</b> =
  <tt class=3D"REPLACEABLE"><i>format-string</i></tt>...   <tt class=3D"REP=
LACEABLE"><i>parameter</i></tt>... </p><p>This is the Bash <i class=3D"FIRS=
TTERM">builtin</i> version
	      of the <tt class=3D"FILENAME">/bin/printf</tt> or
	      <tt class=3D"FILENAME">/usr/bin/printf</tt> command. See the
	      <b class=3D"COMMAND">printf</b> <a href=3D"https://tldp.org/LDP/abs/=
html/basic.html#MANREF">manpage</a> (of the system command)
	      for in-depth coverage.</p><div class=3D"CAUTION"><p></p><table class=
=3D"CAUTION" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=
=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/caut=
ion.gif" hspace=3D"5" alt=3D"Caution"></td><td align=3D"LEFT" valign=3D"TOP=
"><p>Older versions of Bash may not support
	      <b class=3D"COMMAND">printf</b>.</p></td></tr></tbody></table></div>=
<div class=3D"EXAMPLE"><a name=3D"EX47"></a><p><b>Example 15-2. <i class=3D=
"FIRSTTERM">printf</i> in action</b></p><table border=3D"0" bgcolor=3D"#E0E=
0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"PRO=
GRAMLISTING">#!/bin/bash
# printf demo

declare -r PI=3D3.14159265358979     # Read-only variable, i.e., a constant=
.
declare -r DecimalConstant=3D31373

Message1=3D"Greetings,"
Message2=3D"Earthling."

echo

printf "Pi to 2 decimal places =3D %1.2f" $PI
echo
printf "Pi to 9 decimal places =3D %1.9f" $PI  # It even rounds off correct=
ly.

printf "\n"                                  # Prints a line feed,
                                             # Equivalent to 'echo' . . .

printf "Constant =3D \t%d\n" $DecimalConstant  # Inserts tab (\t).

printf "%s %s \n" $Message1 $Message2

echo

# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D#
# Simulation of C function, sprintf().
# Loading a variable with a formatted string.

echo=20

Pi12=3D$(printf "%1.12f" $PI)
echo "Pi to 12 decimal places =3D $Pi12"      # Roundoff error!

Msg=3D`printf "%s %s \n" $Message1 $Message2`
echo $Msg; echo $Msg

#  As it happens, the 'sprintf' function can now be accessed
#+ as a loadable module to Bash,
#+ but this is not portable.

exit 0</pre></font></td></tr></tbody></table></div><p>Formatting error mess=
ages is a useful application of
	      <b class=3D"COMMAND">printf</b></p><p>	        <table border=3D"0" b=
gcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pr=
e class=3D"PROGRAMLISTING">E_BADDIR=3D85

var=3Dnonexistent_directory

error()
{
  printf "$@" &gt;&amp;2
  # Formats positional params passed, and sends them to stderr.
  echo
  exit $E_BADDIR
}

cd $var || error $"Can't cd to %s." "$var"

# Thanks, S.C.</pre></font></td></tr></tbody></table>
            </p><p>See also <a href=3D"https://tldp.org/LDP/abs/html/assort=
edtips.html#PROGRESSBAR">Example 36-17</a>.</p></dd><dt><a name=3D"READREF"=
></a><b class=3D"COMMAND">read</b></dt><dd><p><span class=3D"QUOTE">"Reads"=
</span> the value
	    of a variable from <tt class=3D"FILENAME">stdin</tt>, that
	    is, interactively fetches input from the keyboard. The
	    <tt class=3D"OPTION">-a</tt> option lets <b class=3D"COMMAND">read</b>
	    get array variables (see <a href=3D"https://tldp.org/LDP/abs/html/arra=
ys.html#EX67">Example 27-6</a>).</p><div class=3D"EXAMPLE"><a name=3D"EX36"=
></a><p><b>Example 15-3. Variable assignment, using <i class=3D"FIRSTTERM">=
read</i></b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbod=
y><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# "Reading" variables.

echo -n "Enter the value of variable 'var1': "
# The -n option to echo suppresses newline.

read var1
# Note no '$' in front of var1, since it is being set.

echo "var1 =3D $var1"


echo

# A single 'read' statement can set multiple variables.
echo -n "Enter the values of variables 'var2' and 'var3' "
echo =3Dn "(separated by a space or tab): "
read var2 var3
echo "var2 =3D $var2      var3 =3D $var3"
#  If you input only one value,
#+ the other variable(s) will remain unset (null).

exit 0</pre></font></td></tr></tbody></table></div><p>A <b class=3D"COMMAND=
">read</b> without an associated variable
	      assigns its input to the dedicated variable <a href=3D"https://tldp.=
org/LDP/abs/html/internalvariables.html#REPLYREF">$REPLY</a>.</p><div class=
=3D"EXAMPLE"><a name=3D"READNOVAR"></a><p><b>Example 15-4. What happens whe=
n <i class=3D"FIRSTTERM">read</i> has no
	        variable</b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"9=
0%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!=
/bin/bash
# read-novar.sh

echo

# -------------------------- #
echo -n "Enter a value: "
read var
echo "\"var\" =3D "$var""
# Everything as expected here.
# -------------------------- #

echo

# ------------------------------------------------------------------- #
echo -n "Enter another value: "
read           #  No variable supplied for 'read', therefore...
               #+ Input to 'read' assigned to default variable, $REPLY.
var=3D"$REPLY"
echo "\"var\" =3D "$var""
# This is equivalent to the first code block.
# ------------------------------------------------------------------- #

echo
echo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D"
echo


#  This example is similar to the "reply.sh" script.
#  However, this one shows that $REPLY is available
#+ even after a 'read' to a variable in the conventional way.


# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D #

#  In some instances, you might wish to discard the first value read.
#  In such cases, simply ignore the $REPLY variable.

{ # Code block.
read            # Line 1, to be discarded.
read line2      # Line 2, saved in variable.
  } &lt;$0
echo "Line 2 of this script is:"
echo "$line2"   #   # read-novar.sh
echo            #   #!/bin/bash  line discarded.

# See also the soundcard-on.sh script.

exit 0</pre></font></td></tr></tbody></table></div><p>Normally, inputting a=
 <tt class=3D"USERINPUT"><b>\</b></tt>
	      suppresses a newline during input to
	      a <b class=3D"COMMAND">read</b>. The <tt class=3D"OPTION">-r</tt>
	      option causes an inputted <tt class=3D"USERINPUT"><b>\</b></tt> to b=
e
	      interpreted literally.</p><div class=3D"EXAMPLE"><a name=3D"READR"><=
/a><p><b>Example 15-5. Multi-line input to <i class=3D"FIRSTTERM">read</i><=
/b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td=
><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash

echo

echo "Enter a string terminated by a \\, then press &lt;ENTER&gt;."
echo "Then, enter a second string (no \\ this time), and again press &lt;EN=
TER&gt;."

read var1     # The "\" suppresses the newline, when reading $var1.
              #     first line \
              #     second line

echo "var1 =3D $var1"
#     var1 =3D first line second line

#  For each line terminated by a "\"
#+ you get a prompt on the next line to continue feeding characters into va=
r1.

echo; echo

echo "Enter another string terminated by a \\ , then press &lt;ENTER&gt;."
read -r var2  # The -r option causes the "\" to be read literally.
              #     first line \

echo "var2 =3D $var2"
#     var2 =3D first line \

# Data entry terminates with the first &lt;ENTER&gt;.

echo=20

exit 0</pre></font></td></tr></tbody></table></div><p><a name=3D"READOPTION=
S"></a></p><p>The <b class=3D"COMMAND">read</b> command has some interestin=
g
	      options that permit echoing a prompt and even reading keystrokes
	      without hitting <b class=3D"KEYCAP">ENTER</b>.</p><p><table border=
=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000=
000"><pre class=3D"PROGRAMLISTING"># Read a keypress without hitting ENTER.

read -s -n1 -p "Hit a key " keypress
echo; echo "Keypress was "\"$keypress\""."

# -s option means do not echo input.
# -n N option means accept only N characters of input.
# -p option means echo the following prompt before reading input.

# Using these options is tricky, since they need to be in the correct order=
.</pre></font></td></tr></tbody></table></p><p><a name=3D"READARROW"></a></=
p><p>The <tt class=3D"OPTION">-n</tt> option to <b class=3D"COMMAND">read</=
b>
	      also allows detection of the <b class=3D"KEYCAP">arrow keys</b>
	      and certain of the other unusual keys.</p><div class=3D"EXAMPLE"><a =
name=3D"ARROWDETECT"></a><p><b>Example 15-6. Detecting the arrow keys</b></=
p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><fon=
t color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# arrow-detect.sh: Detects the arrow keys, and a few more.
# Thank you, Sandro Magi, for showing me how.

# --------------------------------------------
# Character codes generated by the keypresses.
arrowup=3D'\[A'
arrowdown=3D'\[B'
arrowrt=3D'\[C'
arrowleft=3D'\[D'
insert=3D'\[2'
delete=3D'\[3'
# --------------------------------------------

SUCCESS=3D0
OTHER=3D65

echo -n "Press a key...  "
# May need to also press ENTER if a key not listed above pressed.
read -n3 key                      # Read 3 characters.

echo -n "$key" | grep "$arrowup"  #Check if character code detected.
if [ "$?" -eq $SUCCESS ]
then
  echo "Up-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$arrowdown"
if [ "$?" -eq $SUCCESS ]
then
  echo "Down-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$arrowrt"
if [ "$?" -eq $SUCCESS ]
then
  echo "Right-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$arrowleft"
if [ "$?" -eq $SUCCESS ]
then
  echo "Left-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$insert"
if [ "$?" -eq $SUCCESS ]
then
  echo "\"Insert\" key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$delete"
if [ "$?" -eq $SUCCESS ]
then
  echo "\"Delete\" key pressed."
  exit $SUCCESS
fi


echo " Some other key pressed."

exit $OTHER

# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D #

#  Mark Alexander came up with a simplified
#+ version of the above script (Thank you!).
#  It eliminates the need for grep.

#!/bin/bash

  uparrow=3D$'\x1b[A'
  downarrow=3D$'\x1b[B'
  leftarrow=3D$'\x1b[D'
  rightarrow=3D$'\x1b[C'

  read -s -n3 -p "Hit an arrow key: " x

  case "$x" in
  $uparrow)
     echo "You pressed up-arrow"
     ;;
  $downarrow)
     echo "You pressed down-arrow"
     ;;
  $leftarrow)
     echo "You pressed left-arrow"
     ;;
  $rightarrow)
     echo "You pressed right-arrow"
     ;;
  esac

exit $?

# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D #

# Antonio Macchi has a simpler alternative.

#!/bin/bash

while true
do
  read -sn1 a
  test "$a" =3D=3D `echo -en "\e"` || continue
  read -sn1 a
  test "$a" =3D=3D "[" || continue
  read -sn1 a
  case "$a" in
    A)  echo "up";;
    B)  echo "down";;
    C)  echo "right";;
    D)  echo "left";;
  esac
done

# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D #

#  Exercise:
#  --------
#  1) Add detection of the "Home," "End," "PgUp," and "PgDn" keys.</pre></f=
ont></td></tr></tbody></table></div><div class=3D"NOTE"><p></p><table class=
=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=3D"C=
ENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/note.gif"=
 hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D"TOP"><p>The <t=
t class=3D"OPTION">-n</tt> option to <b class=3D"COMMAND">read</b>
	      will not detect the <b class=3D"KEYCAP">ENTER</b> (newline)
	      key.</p></td></tr></tbody></table></div><p><a name=3D"READTIMED"></a=
></p><p>The <tt class=3D"OPTION">-t</tt> option to <b class=3D"COMMAND">rea=
d</b>
	      permits timed input (see <a href=3D"https://tldp.org/LDP/abs/html/in=
ternalvariables.html#TOUT">Example 9-4</a> and <a href=3D"https://tldp.org/=
LDP/abs/html/contributed-scripts.html#QKY">Example A-41</a>).</p><p><a name=
=3D"READFD"></a>The <tt class=3D"OPTION">-u</tt> option
                takes the <a href=3D"https://tldp.org/LDP/abs/html/io-redir=
ection.html#FDREF">file descriptor</a>
                of the target file.</p><p><a name=3D"READREDIR0"></a></p><p=
>The <b class=3D"COMMAND">read</b> command may also
	      <span class=3D"QUOTE">"read"</span> its variable value from a file
	      <a href=3D"https://tldp.org/LDP/abs/html/io-redirection.html#IOREDIR=
REF">redirected</a> to
	      <tt class=3D"FILENAME">stdin</tt>.  If the file contains
	      more than one line, only the first line is assigned
	      to the variable. If <b class=3D"COMMAND">read</b>
	      has more than one parameter, then each of
	      these variables gets assigned a successive <a href=3D"https://tldp.o=
rg/LDP/abs/html/special-chars.html#WHITESPACEREF">whitespace-delineated</a>
	      string. Caution!</p><div class=3D"EXAMPLE"><a name=3D"READREDIR"></a=
><p><b>Example 15-7. Using <i class=3D"FIRSTTERM">read</i> with
	        <a href=3D"https://tldp.org/LDP/abs/html/io-redirection.html#IORED=
IRREF">file redirection</a></b></p><table border=3D"0" bgcolor=3D"#E0E0E0" =
width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"PROGRAML=
ISTING">#!/bin/bash

read var1 &lt;data-file
echo "var1 =3D $var1"
# var1 set to the entire first line of the input file "data-file"

read var2 var3 &lt;data-file
echo "var2 =3D $var2   var3 =3D $var3"
# Note non-intuitive behavior of "read" here.
# 1) Rewinds back to the beginning of input file.
# 2) Each variable is now set to a corresponding string,
#    separated by whitespace, rather than to an entire line of text.
# 3) The final variable gets the remainder of the line.
# 4) If there are more variables to be set than whitespace-terminated strin=
gs
#    on the first line of the file, then the excess variables remain empty.

echo "------------------------------------------------"

# How to resolve the above problem with a loop:
while read line
do
  echo "$line"
done &lt;data-file
# Thanks, Heiner Steven for pointing this out.

echo "------------------------------------------------"

# Use $IFS (Internal Field Separator variable) to split a line of input to
# "read", if you do not want the default to be whitespace.

echo "List of all users:"
OIFS=3D$IFS; IFS=3D:       # /etc/passwd uses ":" for field separator.
while read name passwd uid gid fullname ignore
do
  echo "$name ($fullname)"
done &lt;/etc/passwd   # I/O redirection.
IFS=3D$OIFS              # Restore original $IFS.
# This code snippet also by Heiner Steven.



#  Setting the $IFS variable within the loop itself
#+ eliminates the need for storing the original $IFS
#+ in a temporary variable.
#  Thanks, Dim Segebart, for pointing this out.
echo "------------------------------------------------"
echo "List of all users:"

while IFS=3D: read name passwd uid gid fullname ignore
do
  echo "$name ($fullname)"
done &lt;/etc/passwd   # I/O redirection.

echo
echo "\$IFS still $IFS"

exit 0</pre></font></td></tr></tbody></table></div><div class=3D"NOTE"><p><=
/p><table class=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D=
"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/i=
mages/note.gif" hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D=
"TOP"><p><a name=3D"PIPEREADREF0"></a></p><p><a href=3D"https://tldp.org/LD=
P/abs/html/special-chars.html#PIPEREF">Piping</a> output
	      to a <i class=3D"FIRSTTERM">read</i>, using <a href=3D"https://tldp.=
org/LDP/abs/html/internal.html#ECHOREF">echo</a> to set variables <a href=
=3D"https://tldp.org/LDP/abs/html/gotchas.html#BADREAD0">will fail</a>.</p>=
<p><a name=3D"READPIPEREF"></a>Yet, piping the output of <a href=3D"https:/=
/tldp.org/LDP/abs/html/basic.html#CATREF">cat</a> <em>seems</em> to
	      work.</p><p><a name=3D"WHILEREADREF"></a></p><p><table border=3D"0" =
bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><p=
re class=3D"PROGRAMLISTING">cat file1 file2 |
while read line
do
echo $line
done</pre></font></td></tr></tbody></table></p><p>However, as Bj=F6n Erikss=
on shows:</p><div class=3D"EXAMPLE"><a name=3D"READPIPE"></a><p><b>Example =
15-8. Problems reading from a pipe</b></p><table border=3D"0" bgcolor=3D"#E=
0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"P=
ROGRAMLISTING">#!/bin/sh
# readpipe.sh
# This example contributed by Bjon Eriksson.

### shopt -s lastpipe

last=3D"(null)"
cat $0 |
while read line
do
    echo "{$line}"
    last=3D$line
done

echo
echo "++++++++++++++++++++++"
printf "\nAll done, last: $last\n" #  The output of this line
                                   #+ changes if you uncomment line 5.
                                   #  (Bash, version -ge 4.2 required.)

exit 0  # End of code.
        # (Partial) output of script follows.
        # The 'echo' supplies extra brackets.

#############################################

./readpipe.sh=20

{#!/bin/sh}
{last=3D"(null)"}
{cat $0 |}
{while read line}
{do}
{echo "{$line}"}
{last=3D$line}
{done}
{printf "nAll done, last: $lastn"}


All done, last: (null)

The variable (last) is set within the loop/subshell
but its value does not persist outside the loop.</pre></font></td></tr></tb=
ody></table></div><p>The <i class=3D"FIRSTTERM">gendiff</i> script, usually
              found in <tt class=3D"FILENAME">/usr/bin</tt> on
              many Linux distros, pipes the output of <a href=3D"https://tl=
dp.org/LDP/abs/html/moreadv.html#FINDREF">find</a> to a <i class=3D"FIRSTTE=
RM">while
              read</i> construct.

	      <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td=
><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">find $1 \( -name "*$=
2" -o -name ".*$2" \) -print |
while read f; do
. . .</pre></font></td></tr></tbody></table>
            </p></td></tr></tbody></table></div><div class=3D"TIP"><p></p><=
table class=3D"TIP" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" =
align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images=
/tip.gif" hspace=3D"5" alt=3D"Tip"></td><td align=3D"LEFT" valign=3D"TOP"><=
p>It is possible to <i class=3D"FIRSTTERM">paste</i> text into
	        the input field of a <i class=3D"FIRSTTERM">read</i> (but
		<em>not</em> multiple lines!). See <a href=3D"https://tldp.org/LDP/abs/ht=
ml/contributed-scripts.html#PADSW">Example A-38</a>.</p></td></tr></tbody><=
/table></div></dd></dl></div><p></p><div class=3D"VARIABLELIST"><p><b><a na=
me=3D"INTFILESYSTEM1"></a>Filesystem</b></p><dl><dt><a name=3D"CDREF"></a><=
b class=3D"COMMAND">cd</b></dt><dd><p>The familiar <b class=3D"COMMAND">cd<=
/b> change directory
	      command finds use in scripts where execution of a command
	      requires being in a specified directory.</p><p> =20
	      <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td=
><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">(cd /source/director=
y &amp;&amp; tar cf - . ) | (cd /dest/directory &amp;&amp; tar xpvf -)</pre=
></font></td></tr></tbody></table>
	      [from the <a href=3D"https://tldp.org/LDP/abs/html/special-chars.htm=
l#COXEX">previously cited</a>
	      example by Alan Cox]</p><p>The <tt class=3D"OPTION">-P</tt> (physica=
l) option to
	      <b class=3D"COMMAND">cd</b> causes it to ignore symbolic
	      links.</p><p><b class=3D"COMMAND">cd -</b> changes to <a href=3D"htt=
ps://tldp.org/LDP/abs/html/internalvariables.html#OLDPWD">$OLDPWD</a>, the =
previous working
	    directory.</p><p><a name=3D"DOUBLESLASHREF"></a></p><div class=3D"CAUT=
ION"><p></p><table class=3D"CAUTION" width=3D"90%" border=3D"0"><tbody><tr>=
<td width=3D"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.o=
rg/LDP/abs/images/caution.gif" hspace=3D"5" alt=3D"Caution"></td><td align=
=3D"LEFT" valign=3D"TOP"><p>The <b class=3D"COMMAND">cd</b> command does no=
t function
	      as expected when presented with two forward slashes.

	      <table border=3D"1" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td=
><font color=3D"#000000"><pre class=3D"SCREEN"><tt class=3D"PROMPT">bash$ <=
/tt><tt class=3D"USERINPUT"><b>cd //</b></tt>
<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>pwd</b></tt>
<tt class=3D"COMPUTEROUTPUT">//</tt>
	      </pre></font></td></tr></tbody></table>
	      The output should, of course, be <tt class=3D"COMPUTEROUTPUT">/</tt>=
.
	      This is a problem both from the command-line and in a script.</p></t=
d></tr></tbody></table></div></dd><dt><a name=3D"PWD2REF"></a><b class=3D"C=
OMMAND">pwd</b></dt><dd><p>Print Working Directory. This gives the user's
	      (or script's) current directory (see <a href=3D"https://tldp.org/LDP=
/abs/html/internal.html#EX37">Example 15-9</a>). The effect is identical to
	      reading the value of the builtin variable <a href=3D"https://tldp.or=
g/LDP/abs/html/internalvariables.html#PWDREF">$PWD</a>.</p></dd><dt><a name=
=3D"DIRSD"></a><b class=3D"COMMAND">pushd</b>, <b class=3D"COMMAND">popd</b=
>, <b class=3D"COMMAND">dirs</b></dt><dd><p>This command set is a mechanism=
 for bookmarking
	      working directories, a means of moving back and forth
	      through directories in an orderly manner. A pushdown <a href=3D"http=
s://tldp.org/LDP/abs/html/internalvariables.html#STACKDEFREF">stack</a> is =
used to keep track
	      of directory names. Options allow various manipulations
	      of the directory stack.</p><p><a name=3D"PUSHDREF"></a><tt class=3D"=
USERINPUT"><b>pushd
	      dir-name</b></tt> pushes the path
	      <tt class=3D"REPLACEABLE"><i>dir-name</i></tt> onto the directory
	      stack (to the <i class=3D"FIRSTTERM">top</i> of the stack)
	      and simultaneously changes the current working directory
	      to <tt class=3D"REPLACEABLE"><i>dir-name</i></tt></p><p><a name=3D"P=
OPDREF"></a><b class=3D"COMMAND">popd</b> removes
	      (pops) the top directory path name off the directory stack
	      and simultaneously changes the current working directory
	      to the directory now at the <i class=3D"FIRSTTERM">top</i> of
	      the stack.</p><p><a name=3D"DIRSREF"></a><b class=3D"COMMAND">dirs</=
b> lists
	      the contents of the directory stack (compare this
	      with the <a href=3D"https://tldp.org/LDP/abs/html/internalvariables.=
html#DIRSTACKREF">$DIRSTACK</a>
	      variable).  A successful <b class=3D"COMMAND">pushd</b>
	      or <b class=3D"COMMAND">popd</b> will automatically invoke
	      <b class=3D"COMMAND">dirs</b>.</p><p>Scripts that require various ch=
anges to the current
	      working directory without hard-coding the directory name
	      changes can make good use of these commands. Note that
	      the implicit <tt class=3D"VARNAME">$DIRSTACK</tt> array variable,
	      accessible from within a script, holds the contents of
	      the directory stack.
	    </p><div class=3D"EXAMPLE"><a name=3D"EX37"></a><p><b>Example 15-9. Ch=
anging the current working directory</b></p><table border=3D"0" bgcolor=3D"=
#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D=
"PROGRAMLISTING">#!/bin/bash

dir1=3D/usr/local
dir2=3D/var/spool

pushd $dir1
# Will do an automatic 'dirs' (list directory stack to stdout).
echo "Now in directory `pwd`." # Uses back-quoted 'pwd'.

# Now, do some stuff in directory 'dir1'.
pushd $dir2
echo "Now in directory `pwd`."

# Now, do some stuff in directory 'dir2'.
echo "The top entry in the DIRSTACK array is $DIRSTACK."
popd
echo "Now back in directory `pwd`."

# Now, do some more stuff in directory 'dir1'.
popd
echo "Now back in original working directory `pwd`."

exit 0

# What happens if you don't 'popd' -- then exit the script?
# Which directory do you end up in? Why?</pre></font></td></tr></tbody></ta=
ble></div></dd></dl></div><p></p><div class=3D"VARIABLELIST"><p><b><a name=
=3D"INTVAR1"></a>Variables</b></p><dl><dt><a name=3D"LETREF"></a><b class=
=3D"COMMAND">let</b></dt><dd><p>The <b class=3D"COMMAND">let</b> command ca=
rries out
                    <i class=3D"FIRSTTERM">arithmetic</i> operations on var=
iables.

          <a name=3D"AEN9009" href=3D"https://tldp.org/LDP/abs/html/interna=
l.html#FTN.AEN9009"><span class=3D"footnote">[3]</span></a>
			 =20
		    In many cases, it functions as a less complex version
                    of <a href=3D"https://tldp.org/LDP/abs/html/moreadv.htm=
l#EXPRREF">expr</a>.</p><div class=3D"EXAMPLE"><a name=3D"EX46"></a><p><b>E=
xample 15-10. Letting <i class=3D"FIRSTTERM">let</i> do arithmetic.</b></p>=
<table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font =
color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash

echo

let a=3D11            # Same as 'a=3D11'
let a=3Da+5           # Equivalent to  let "a =3D a + 5"
                    # (Double quotes and spaces make it more readable.)
echo "11 + 5 =3D $a"  # 16

let "a &lt;&lt;=3D 3"       # Equivalent to  let "a =3D a &lt;&lt; 3"
echo "\"\$a\" (=3D16) left-shifted 3 places =3D $a"
                    # 128

let "a /=3D 4"        # Equivalent to  let "a =3D a / 4"
echo "128 / 4 =3D $a" # 32

let "a -=3D 5"        # Equivalent to  let "a =3D a - 5"
echo "32 - 5 =3D $a"  # 27

let "a *=3D  10"      # Equivalent to  let "a =3D a * 10"
echo "27 * 10 =3D $a" # 270

let "a %=3D 8"        # Equivalent to  let "a =3D a % 8"
echo "270 modulo 8 =3D $a  (270 / 8 =3D 33, remainder $a)"
                    # 6


# Does "let" permit C-style operators?
# Yes, just as the (( ... )) double-parentheses construct does.

let a++             # C-style (post) increment.
echo "6++ =3D $a"     # 6++ =3D 7
let a--             # C-style decrement.
echo "7-- =3D $a"     # 7-- =3D 6
# Of course, ++a, etc., also allowed . . .
echo


# Trinary operator.

# Note that $a is 6, see above.
let "t =3D a&lt;7?7:11"   # True
echo $t  # 7

let a++
let "t =3D a&lt;7?7:11"   # False
echo $t  #     11

exit</pre></font></td></tr></tbody></table></div><p><a name=3D"EXITVALANOMA=
LY02"></a></p><div class=3D"CAUTION"><p></p><table class=3D"CAUTION" width=
=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=3D"CENTER" valign=
=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/caution.gif" hspace=3D=
"5" alt=3D"Caution"></td><td align=3D"LEFT" valign=3D"TOP"><p>The <i class=
=3D"FIRSTTERM">let</i> command can,
                      in certain contexts, return a surprising <a href=3D"h=
ttps://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF">exit status</a=
>.</p><p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><=
td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING"># Evgeniy Ivanov p=
oints out:

var=3D0
echo $?     # 0
            # As expected.

let var++
echo $?     # 1
            # The command was successful, so why isn't $?=3D0 ???
            # Anomaly!

let var++
echo $?     # 0
            # As expected.


# Likewise . . .

let var=3D0
echo $?     # 1
            # The command was successful, so why isn't $?=3D0 ???

#  However, as Jeff Gorak points out,
#+ this is part of the design spec for 'let' . . .
# "If the last ARG evaluates to 0, let returns 1;
#  let returns 0 otherwise." ['help let']</pre></font></td></tr></tbody></t=
able></p></td></tr></tbody></table></div></dd><dt><a name=3D"EVALREF"></a><=
b class=3D"COMMAND">eval</b></dt><dd><p><tt class=3D"USERINPUT"><b>eval arg=
1 [arg2] ... [argN]</b></tt></p><p>Combines the arguments in an expression =
or list of
              expressions and <tt class=3D"REPLACEABLE"><i>evaluates</i></t=
t> them.
              Any variables within the expression are expanded. The
	      net result is to <b class=3D"COMMAND">convert a string into a
              command</b>.</p><div class=3D"TIP"><p></p><table class=3D"TIP=
" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=3D"CENTER" v=
align=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/tip.gif" hspace=
=3D"5" alt=3D"Tip"></td><td align=3D"LEFT" valign=3D"TOP"><p>The <b class=
=3D"COMMAND">eval</b> command can be used for
	      code generation from the command-line or within a script.
	      </p></td></tr></tbody></table></div><p>	      <table border=3D"1" bg=
color=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre=
 class=3D"SCREEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><=
b>command_string=3D"ps ax"</b></tt>
<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>process=3D"ps ax=
"</b></tt>
<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>eval "$command_s=
tring" | grep "$process"</b></tt>
<tt class=3D"COMPUTEROUTPUT">26973 pts/3    R+     0:00 grep --color ps ax
 26974 pts/3    R+     0:00 ps ax</tt>
	      </pre></font></td></tr></tbody></table>
	      </p><p><a name=3D"EVALFORCED"></a></p><p>Each invocation of <i class=
=3D"FIRSTTERM">eval</i> forces
        a re-<em>evaluation</em> of its arguments.
	<table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font=
 color=3D"#000000"><pre class=3D"PROGRAMLISTING">a=3D'$b'
b=3D'$c'
c=3Dd

echo $a             # $b
                    # First level.
eval echo $a        # $c
                    # Second level.
eval eval echo $a   # d
                    # Third level.

# Thank you, E. Choroba.</pre></font></td></tr></tbody></table></p><p><a na=
me=3D"EVALEFF"></a></p><div class=3D"EXAMPLE"><a name=3D"EX43"></a><p><b>Ex=
ample 15-11. Showing the effect of <i class=3D"FIRSTTERM">eval</i></b></p><=
table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font c=
olor=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# Exercising "eval" ...

y=3D`eval ls -l`  #  Similar to y=3D`ls -l`
echo $y         #+ but linefeeds removed because "echoed" variable is unquo=
ted.
echo
echo "$y"       #  Linefeeds preserved when variable is quoted.

echo; echo

y=3D`eval df`     #  Similar to y=3D`df`
echo $y         #+ but linefeeds removed.

#  When LF's not preserved, it may make it easier to parse output,
#+ using utilities such as "awk".

echo
echo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"
echo

eval "`seq 3 | sed -e 's/.*/echo var&amp;=3DABCDEFGHIJ/'`"
# var1=3DABCDEFGHIJ
# var2=3DABCDEFGHIJ
# var3=3DABCDEFGHIJ

echo
echo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"
echo


# Now, showing how to do something useful with "eval" . . .
# (Thank you, E. Choroba!)

version=3D3.4     #  Can we split the version into major and minor
                #+ part in one command?
echo "version =3D $version"
eval major=3D${version/./;minor=3D}     #  Replaces '.' in version by ';min=
or=3D'
                                    #  The substitution yields '3; minor=3D=
4'
                                    #+ so eval does minor=3D4, major=3D3
echo Major: $major, minor: $minor   #  Major: 3, minor: 4</pre></font></td>=
</tr></tbody></table></div><p><a name=3D"ARRCHOICE0"></a></p><div class=3D"=
EXAMPLE"><a name=3D"ARRCHOICE"></a><p><b>Example 15-12. Using <i class=3D"F=
IRSTTERM">eval</i> to select
                      among variables</b></p><table border=3D"0" bgcolor=3D=
"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=
=3D"PROGRAMLISTING">#!/bin/bash
# arr-choice.sh

#  Passing arguments to a function to select
#+ one particular variable out of a group.

arr0=3D( 10 11 12 13 14 15 )
arr1=3D( 20 21 22 23 24 25 )
arr2=3D( 30 31 32 33 34 35 )
#       0  1  2  3  4  5      Element number (zero-indexed)


choose_array ()
{
  eval array_member=3D\${arr${array_number}[element_number]}
  #                 ^       ^^^^^^^^^^^^
  #  Using eval to construct the name of a variable,
  #+ in this particular case, an array name.

  echo "Element $element_number of array $array_number is $array_member"
} #  Function can be rewritten to take parameters.

array_number=3D0    # First array.
element_number=3D3
choose_array      # 13

array_number=3D2    # Third array.
element_number=3D4
choose_array      # 34

array_number=3D3    # Null array (arr3 not allocated).
element_number=3D4
choose_array      # (null)

# Thank you, Antonio Macchi, for pointing this out.</pre></font></td></tr><=
/tbody></table></div><div class=3D"EXAMPLE"><a name=3D"ECHOPARAMS"></a><p><=
b>Example 15-13. <i class=3D"FIRSTTERM">Echoing</i> the
	        <i class=3D"FIRSTTERM">command-line parameters</i></b></p><table b=
order=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D=
"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# echo-params.sh

# Call this script with a few command-line parameters.
# For example:
#     sh echo-params.sh first second third fourth fifth

params=3D$#              # Number of command-line parameters.
param=3D1                # Start at first command-line param.

while [ "$param" -le "$params" ]
do
  echo -n "Command-line parameter "
  echo -n \$$param     #  Gives only the *name* of variable.
#         ^^^          #  $1, $2, $3, etc.
                       #  Why?
                       #  \$ escapes the first "$"
                       #+ so it echoes literally,
                       #+ and $param dereferences "$param" . . .
                       #+ . . . as expected.
  echo -n " =3D "
  eval echo \$$param   #  Gives the *value* of variable.
# ^^^^      ^^^        #  The "eval" forces the *evaluation*
                       #+ of \$$
                       #+ as an indirect variable reference.

(( param ++ ))         # On to the next.
done

exit $?

# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

$ sh echo-params.sh first second third fourth fifth
Command-line parameter $1 =3D first
Command-line parameter $2 =3D second
Command-line parameter $3 =3D third
Command-line parameter $4 =3D fourth
Command-line parameter $5 =3D fifth</pre></font></td></tr></tbody></table><=
/div><div class=3D"EXAMPLE"><a name=3D"EX44"></a><p><b>Example 15-14. Forci=
ng a log-off</b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><=
tbody><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/=
bash
# Killing ppp to force a log-off.
# For dialup connection, of course.

# Script should be run as root user.

SERPORT=3DttyS3
#  Depending on the hardware and even the kernel version,
#+ the modem port on your machine may be different --
#+ /dev/ttyS1 or /dev/ttyS2.


killppp=3D"eval kill -9 `ps ax | awk '/ppp/ { print $1 }'`"
#                     -------- process ID of ppp ------- =20

$killppp                     # This variable is now a command.


# The following operations must be done as root user.

chmod 666 /dev/$SERPORT      # Restore r+w permissions, or else what?
#  Since doing a SIGKILL on ppp changed the permissions on the serial port,
#+ we restore permissions to previous state.

rm /var/lock/LCK..$SERPORT   # Remove the serial port lock file. Why?

exit $?

# Exercises:
# ---------
# 1) Have script check whether root user is invoking it.
# 2) Do a check on whether the process to be killed
#+   is actually running before attempting to kill it.  =20
# 3) Write an alternate version of this script based on 'fuser':
#+      if [ fuser -s /dev/modem ]; then . . .</pre></font></td></tr></tbod=
y></table></div><div class=3D"EXAMPLE"><a name=3D"ROT14"></a><p><b>Example =
15-15. A version of <i class=3D"FIRSTTERM">rot13</i></b></p><table border=
=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000=
000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# A version of "rot13" using 'eval'.
# Compare to "rot13.sh" example.

setvar_rot_13()              # "rot13" scrambling
{
  local varname=3D$1 varvalue=3D$2
  eval $varname=3D'$(echo "$varvalue" | tr a-z n-za-m)'
}


setvar_rot_13 var "foobar"   # Run "foobar" through rot13.
echo $var                    # sbbone

setvar_rot_13 var "$var"     # Run "sbbone" through rot13.
                             # Back to original variable.
echo $var                    # foobar

# This example by Stephane Chazelas.
# Modified by document author.

exit 0</pre></font></td></tr></tbody></table></div><p>Here is another examp=
le of using
              <i class=3D"FIRSTTERM">eval</i> to
              <em>evaluate</em> a complex expression,
              this one from an earlier version of YongYe's <a href=3D"https=
://github.com/yongye/shell/blob/master/Tetris_Game.sh" target=3D"_top">Tetr=
is
              game script</a>.</p><p>           <table border=3D"0" bgcolor=
=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre clas=
s=3D"PROGRAMLISTING">eval ${1}+=3D\"${x} ${y} \"</pre></font></td></tr></tb=
ody></table>
           </p><p><a href=3D"https://tldp.org/LDP/abs/html/contributed-scri=
pts.html#SAMORSE">Example A-53</a> uses
	      <i class=3D"FIRSTTERM">eval</i> to convert <a href=3D"https://tldp.o=
rg/LDP/abs/html/arrays.html#ARRAYREF">array</a> elements into a command
              list.</p><p>The <i class=3D"FIRSTTERM">eval</i> command occur=
s
	      in the older version of <a href=3D"https://tldp.org/LDP/abs/html/ivr=
.html#IVRREF">indirect
	      referencing</a>.
	      <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td=
><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">eval var=3D\$$var</p=
re></font></td></tr></tbody></table>=20
	      </p><div class=3D"TIP"><p></p><table class=3D"TIP" width=3D"90%" bor=
der=3D"0"><tbody><tr><td width=3D"25" align=3D"CENTER" valign=3D"TOP"><img =
src=3D"https://tldp.org/LDP/abs/images/tip.gif" hspace=3D"5" alt=3D"Tip"></=
td><td align=3D"LEFT" valign=3D"TOP"><p>The <i class=3D"FIRSTTERM">eval</i>=
 command can
                be used to <a href=3D"https://tldp.org/LDP/abs/html/bashver=
3.html#BRACEEXPREF3">parameterize
                <i class=3D"FIRSTTERM">brace expansion</i></a>.</p></td></t=
r></tbody></table></div><p><a name=3D"EVALRISK"></a></p><div class=3D"CAUTI=
ON"><p></p><table class=3D"CAUTION" width=3D"90%" border=3D"0"><tbody><tr><=
td width=3D"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.or=
g/LDP/abs/images/caution.gif" hspace=3D"5" alt=3D"Caution"></td><td align=
=3D"LEFT" valign=3D"TOP"><p>The <b class=3D"COMMAND">eval</b> command can b=
e
	      risky, and normally should be avoided when there
	      exists a reasonable alternative. An <tt class=3D"USERINPUT"><b>eval
	      $COMMANDS</b></tt> executes the contents of
	      <tt class=3D"REPLACEABLE"><i>COMMANDS</i></tt>, which may
	      contain such unpleasant surprises as <b class=3D"COMMAND">rm -rf
	      *</b>. Running an <b class=3D"COMMAND">eval</b> on
	      unfamiliar code written by persons unknown is living
	      dangerously.</p></td></tr></tbody></table></div></dd><dt><a name=3D"=
SETREF"></a><b class=3D"COMMAND">set</b></dt><dd><p>The <b class=3D"COMMAND=
">set</b> command changes
	      the value of internal script variables/options. One use for
	      this is to toggle <a href=3D"https://tldp.org/LDP/abs/html/options.h=
tml#OPTIONSREF">option
	      flags</a> which help determine the behavior of the
	      script. Another application for it is to reset the <a href=3D"https:=
//tldp.org/LDP/abs/html/internalvariables.html#POSPARAMREF">positional para=
meters</a> that
	      a script sees as the result of a command (<tt class=3D"USERINPUT"><b=
>set
	      `command`</b></tt>). The script can then parse the
	      <a href=3D"https://tldp.org/LDP/abs/html/special-chars.html#FIELDREF=
">fields</a> of the command
	      output.</p><div class=3D"EXAMPLE"><a name=3D"EX34"></a><p><b>Example=
 15-16. Using <i class=3D"FIRSTTERM">set</i> with positional
	        parameters</b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D=
"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">=
#!/bin/bash
# ex34.sh
# Script "set-test"

# Invoke this script with three command-line parameters,
# for example, "sh ex34.sh one two three".

echo
echo "Positional parameters before  set \`uname -a\` :"
echo "Command-line argument #1 =3D $1"
echo "Command-line argument #2 =3D $2"
echo "Command-line argument #3 =3D $3"


set `uname -a` # Sets the positional parameters to the output
               # of the command `uname -a`

echo
echo +++++
echo $_        # +++++
# Flags set in script.
echo $-        # hB
#                Anomalous behavior?
echo

echo "Positional parameters after  set \`uname -a\` :"
# $1, $2, $3, etc. reinitialized to result of `uname -a`
echo "Field #1 of 'uname -a' =3D $1"
echo "Field #2 of 'uname -a' =3D $2"
echo "Field #3 of 'uname -a' =3D $3"
echo \#\#\#
echo $_        # ###
echo

exit 0</pre></font></td></tr></tbody></table></div><p>More fun with positio=
nal parameters.</p><div class=3D"EXAMPLE"><a name=3D"REVPOSPARAMS"></a><p><=
b>Example 15-17. Reversing the positional parameters</b></p><table border=
=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000=
000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# revposparams.sh: Reverse positional parameters.
# Script by Dan Jacobson, with stylistic revisions by document author.


set a\ b c d\ e;
#     ^      ^     Spaces escaped=20
#       ^ ^        Spaces not escaped
OIFS=3D$IFS; IFS=3D:;
#              ^   Saving old IFS and setting new one.

echo

until [ $# -eq 0 ]
do          #      Step through positional parameters.
  echo "### k0 =3D "$k""     # Before
  k=3D$1:$k;  #      Append each pos param to loop variable.
#     ^
  echo "### k =3D "$k""      # After
  echo
  shift;
done

set $k  #  Set new positional parameters.
echo -
echo $# #  Count of positional parameters.
echo -
echo

for i   #  Omitting the "in list" sets the variable -- i --
        #+ to the positional parameters.
do
  echo $i  # Display new positional parameters.
done

IFS=3D$OIFS  # Restore IFS.

#  Question:
#  Is it necessary to set an new IFS, internal field separator,
#+ in order for this script to work properly?
#  What happens if you don't? Try it.
#  And, why use the new IFS -- a colon -- in line 17,
#+ to append to the loop variable?
#  What is the purpose of this?

exit 0

$ ./revposparams.sh

### k0 =3D=20
### k =3D a b

### k0 =3D a b
### k =3D c a b

### k0 =3D c a b
### k =3D d e c a b

-
3
-

d e
c
a b</pre></font></td></tr></tbody></table></div><p>Invoking <b class=3D"COM=
MAND">set</b> without any options or
	      arguments simply lists all the <a href=3D"https://tldp.org/LDP/abs/h=
tml/othertypesv.html#ENVREF">environmental</a> and other variables
	      that have been initialized.</p><p>	      <table border=3D"1" bgcolor=
=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre clas=
s=3D"SCREEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>set=
</b></tt>
<tt class=3D"COMPUTEROUTPUT">AUTHORCOPY=3D/home/bozo/posts
 BASH=3D/bin/bash
 BASH_VERSION=3D$'2.05.8(1)-release'
 ...
 XAUTHORITY=3D/home/bozo/.Xauthority
 _=3D/etc/bashrc
 variable22=3Dabc
 variable23=3Dxzy</tt>
	      </pre></font></td></tr></tbody></table>
            </p><p>Using <b class=3D"COMMAND">set</b> with the <tt class=3D=
"OPTION">--</tt>
	      option explicitly assigns the contents of a variable to
	      the positional parameters. If no variable follows the
	      <tt class=3D"OPTION">--</tt> it <i class=3D"FIRSTTERM">unsets</i>
	      the positional parameters.</p><div class=3D"EXAMPLE"><a name=3D"SETP=
OS"></a><p><b>Example 15-18. Reassigning the positional parameters</b></p><=
table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font c=
olor=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash

variable=3D"one two three four five"

set -- $variable
# Sets positional parameters to the contents of "$variable".

first_param=3D$1
second_param=3D$2
shift; shift        # Shift past first two positional params.
# shift 2             also works.
remaining_params=3D"$*"

echo
echo "first parameter =3D $first_param"             # one
echo "second parameter =3D $second_param"           # two
echo "remaining parameters =3D $remaining_params"   # three four five

echo; echo

# Again.
set -- $variable
first_param=3D$1
second_param=3D$2
echo "first parameter =3D $first_param"             # one
echo "second parameter =3D $second_param"           # two

# =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D

set --
# Unsets positional parameters if no variable specified.

first_param=3D$1
second_param=3D$2
echo "first parameter =3D $first_param"             # (null value)
echo "second parameter =3D $second_param"           # (null value)

exit 0</pre></font></td></tr></tbody></table></div><p>See also <a href=3D"h=
ttps://tldp.org/LDP/abs/html/loops1.html#EX22A">Example 11-2</a> and <a hre=
f=3D"https://tldp.org/LDP/abs/html/extmisc.html#EX33A">Example 16-56</a>.</=
p></dd><dt><a name=3D"UNSETREF"></a><b class=3D"COMMAND">unset</b></dt><dd>=
<p>The <b class=3D"COMMAND">unset</b> command deletes a
	      shell variable, effectively setting it to
	      <i class=3D"FIRSTTERM">null</i>. Note that this command does
	      not affect positional parameters.</p><p>	      <table border=3D"1" b=
gcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pr=
e class=3D"SCREEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT">=
<b>unset PATH</b></tt>

<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>echo $PATH</b></=
tt>
<tt class=3D"COMPUTEROUTPUT">
</tt>
<tt class=3D"PROMPT">bash$ </tt></pre></font></td></tr></tbody></table>
	    </p><div class=3D"EXAMPLE"><a name=3D"UNS"></a><p><b>Example 15-19. <s=
pan class=3D"QUOTE">"Unsetting"</span> a variable</b></p><table border=3D"0=
" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000">=
<pre class=3D"PROGRAMLISTING">#!/bin/bash
# unset.sh: Unsetting a variable.

variable=3Dhello                       #  Initialized.
echo "variable =3D $variable"

unset variable                       #  Unset.
                                     #  In this particular context,
                                     #+ same effect as:   variable=3D
echo "(unset) variable =3D $variable"  #  $variable is null.

if [ -z "$variable" ]                #  Try a string-length test.
then
  echo "\$variable has zero length."
fi

exit 0</pre></font></td></tr></tbody></table></div><div class=3D"NOTE"><p><=
/p><table class=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D=
"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/i=
mages/note.gif" hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D=
"TOP"><p>In most contexts, an <i class=3D"FIRSTTERM">undeclared</i>
              variable and one that has been <i class=3D"FIRSTTERM">unset</=
i>
	      are equivalent. However, the <a href=3D"https://tldp.org/LDP/abs/htm=
l/parameter-substitution.html#UNDDR">              ${parameter:-default}</a=
> parameter substitution
              construct can distinguish between the two.</p></td></tr></tbo=
dy></table></div></dd><dt><a name=3D"EXPORTREF"></a><b class=3D"COMMAND">ex=
port</b></dt><dd><p><a name=3D"EXPORTREF2"></a></p><p>The <b class=3D"COMMA=
ND">export</b>

	      <a name=3D"AEN9199" href=3D"https://tldp.org/LDP/abs/html/internal.h=
tml#FTN.AEN9199"><span class=3D"footnote">[4]</span></a>
	 =20
	      command makes available variables to all child processes
	      of the running script or shell. One important use
	      of the <b class=3D"COMMAND">export</b> command is in <a href=3D"http=
s://tldp.org/LDP/abs/html/files.html#FILESREF1">startup files</a>, to initi=
alize
	      and make accessible <a href=3D"https://tldp.org/LDP/abs/html/otherty=
pesv.html#ENVREF">environmental
	      variables</a> to subsequent user processes.</p><div class=3D"CAUTION=
"><p></p><table class=3D"CAUTION" width=3D"90%" border=3D"0"><tbody><tr><td=
 width=3D"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/=
LDP/abs/images/caution.gif" hspace=3D"5" alt=3D"Caution"></td><td align=3D"=
LEFT" valign=3D"TOP"><p>Unfortunately, <a href=3D"https://tldp.org/LDP/abs/=
html/gotchas.html#PARCHILDPROBREF">	     there is no way to export variable=
s back to the parent
	     process</a>, to the process that called or invoked the
	     script or shell.</p></td></tr></tbody></table></div><p><a name=3D"EXP=
ORTAWK"></a></p><div class=3D"EXAMPLE"><a name=3D"COLTOTALER3"></a><p><b>Ex=
ample 15-20. Using <i class=3D"FIRSTTERM">export</i> to pass a variable to =
an
	      embedded <i class=3D"FIRSTTERM">awk</i> script</b></p><table border=
=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000=
000"><pre class=3D"PROGRAMLISTING">#!/bin/bash

#  Yet another version of the "column totaler" script (col-totaler.sh)
#+ that adds up a specified column (of numbers) in the target file.
#  This uses the environment to pass a script variable to 'awk' . . .
#+ and places the awk script in a variable.


ARGS=3D2
E_WRONGARGS=3D85

if [ $# -ne "$ARGS" ] # Check for proper number of command-line args.
then
   echo "Usage: `basename $0` filename column-number"
   exit $E_WRONGARGS
fi

filename=3D$1
column_number=3D$2

#=3D=3D=3D=3D=3D Same as original script, up to this point =3D=3D=3D=3D=3D#

export column_number
# Export column number to environment, so it's available for retrieval.


# -----------------------------------------------
awkscript=3D'{ total +=3D $ENVIRON["column_number"] }
END { print total }'
# Yes, a variable can hold an awk script.
# -----------------------------------------------

# Now, run the awk script.
awk "$awkscript" "$filename"

# Thanks, Stephane Chazelas.

exit 0</pre></font></td></tr></tbody></table></div><div class=3D"TIP"><p></=
p><table class=3D"TIP" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"2=
5" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/ima=
ges/tip.gif" hspace=3D"5" alt=3D"Tip"></td><td align=3D"LEFT" valign=3D"TOP=
"><p>It is possible to initialize and export
		  variables in the same operation, as in <b class=3D"COMMAND">export
		  var1=3Dxxx</b>.</p><p>However, as Greg Keraunen points out, in certain
		  situations this may have a different effect than
		  setting a variable, then exporting it.</p><p>	        <table border=3D"=
1" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"=
><pre class=3D"SCREEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINP=
UT"><b>export var=3D(a b); echo ${var[0]}</b></tt>
<tt class=3D"COMPUTEROUTPUT">(a b)</tt>



<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>var=3D(a b); exp=
ort var; echo ${var[0]}</b></tt>
<tt class=3D"COMPUTEROUTPUT">a</tt>
	      </pre></font></td></tr></tbody></table>
	    </p></td></tr></tbody></table></div><div class=3D"NOTE"><p></p><table =
class=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=
=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/note=
.gif" hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D"TOP"><p>A=
 variable to be exported may require special
                treatment.  See <a href=3D"https://tldp.org/LDP/abs/html/sa=
mple-bashrc.html#BASHPROF">Example M-2</a>.</p></td></tr></tbody></table></=
div></dd><dt><a name=3D"DECLARE2REF"></a><b class=3D"COMMAND">declare</b>, =
<b class=3D"COMMAND">typeset</b></dt><dd><p>The <a href=3D"https://tldp.org=
/LDP/abs/html/declareref.html">declare</a> and
	      <a href=3D"https://tldp.org/LDP/abs/html/declareref.html">typeset</a=
> commands specify
	      and/or restrict properties of variables.</p></dd><dt><a name=3D"READ=
ONLYREF"></a><b class=3D"COMMAND">readonly</b></dt><dd><p>Same as <a href=
=3D"https://tldp.org/LDP/abs/html/declareref.html">declare -r</a>,
	      sets a variable as read-only, or, in effect, as a
	      constant. Attempts to change the variable fail with
	      an error message. This is the shell analog of the
	      <i class=3D"FIRSTTERM">C</i> language <b class=3D"COMMAND">const</b>
	      type qualifier.</p></dd><dt><a name=3D"GETOPTSX"></a><b class=3D"COM=
MAND">getopts</b></dt><dd><p>This powerful tool parses command-line argumen=
ts passed
	      to the script. This is the Bash analog of the <a href=3D"https://tld=
p.org/LDP/abs/html/extmisc.html#GETOPTY">getopt</a> external command and th=
e
	      <i class=3D"FIRSTTERM">getopt</i> library function familiar to
	      <i class=3D"FIRSTTERM">C</i> programmers. It permits passing
	      and concatenating multiple options

	      <a name=3D"AEN9289" href=3D"https://tldp.org/LDP/abs/html/internal.h=
tml#FTN.AEN9289"><span class=3D"footnote">[5]</span></a>

	      and associated arguments to a script (for
	      example <tt class=3D"USERINPUT"><b>scriptname -abc -e
	      /usr/local</b></tt>).</p><p><a name=3D"GETOPTSOPT"></a></p><p>The <b=
 class=3D"COMMAND">getopts</b> construct uses two implicit
	      variables. <tt class=3D"VARNAME">$OPTIND</tt> is the argument
	      pointer (<i class=3D"WORDASWORD">OPTion INDex</i>)
	      and <tt class=3D"VARNAME">$OPTARG</tt> (<i class=3D"WORDASWORD">OPTi=
on
	      ARGument</i>) the (optional) argument attached
	      to an option. A colon following the option name in the
	      declaration tags that option as having an associated
	      argument.</p><p>A <b class=3D"COMMAND">getopts</b> construct usually=
 comes
	      packaged in a <a href=3D"https://tldp.org/LDP/abs/html/loops1.html#W=
HILELOOPREF">while
	      loop</a>, which processes the options and
	      arguments one at a time, then increments the implicit
	      <tt class=3D"VARNAME">$OPTIND</tt> variable to point to the
	      next.</p><div class=3D"NOTE"><p></p><table class=3D"NOTE" width=3D"9=
0%" border=3D"0"><tbody><tr><td width=3D"25" align=3D"CENTER" valign=3D"TOP=
"><img src=3D"https://tldp.org/LDP/abs/images/note.gif" hspace=3D"5" alt=3D=
"Note"></td><td align=3D"LEFT" valign=3D"TOP"><p>		</p><p></p><ol type=3D"1=
"><li><p>The arguments passed from the command-line to
		      the script must be preceded by a
		      dash (<tt class=3D"OPTION">-</tt>). It is the
		      prefixed <tt class=3D"OPTION">-</tt> that lets
		      <b class=3D"COMMAND">getopts</b> recognize command-line
		      arguments as <i class=3D"FIRSTTERM">options</i>.
		      In fact, <b class=3D"COMMAND">getopts</b> will not process
		      arguments without the prefixed <tt class=3D"OPTION">-</tt>,
		      and will terminate option processing at the first
		      argument encountered lacking them.</p></li><li><p>The <b class=3D"C=
OMMAND">getopts</b> template
		      differs slightly from the standard <a href=3D"https://tldp.org/LDP/=
abs/html/loops1.html#WHILELOOPREF">while loop</a>, in that
		      it lacks condition brackets.</p></li><li><p>The <b class=3D"COMMAND=
">getopts</b> construct is a highly
		     functional replacement for the traditional
		     <a href=3D"https://tldp.org/LDP/abs/html/extmisc.html#GETOPTY">getop=
t</a> external
		     command.</p></li></ol>
	      <p></p></td></tr></tbody></table></div><p><table border=3D"0" bgcolo=
r=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre cla=
ss=3D"PROGRAMLISTING">while getopts ":abcde:fg" Option
# Initial declaration.
# a, b, c, d, e, f, and g are the options (flags) expected.
# The : after option 'e' shows it will have an argument passed with it.
do
  case $Option in
    a ) # Do something with variable 'a'.
    b ) # Do something with variable 'b'.
    ...
    e)  # Do something with 'e', and also with $OPTARG,
        # which is the associated argument passed with option 'e'.
    ...
    g ) # Do something with variable 'g'.
  esac
done
shift $(($OPTIND - 1))
# Move argument pointer to next.

# All this is not nearly as complicated as it looks &lt;grin&gt;.</pre></fo=
nt></td></tr></tbody></table></p><div class=3D"EXAMPLE"><a name=3D"EX33"></=
a><p><b>Example 15-21. Using <i class=3D"FIRSTTERM">getopts</i> to read the
	        options/arguments passed to a script</b></p><table border=3D"0" bg=
color=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre=
 class=3D"PROGRAMLISTING">#!/bin/bash
# ex33.sh: Exercising getopts and OPTIND
#          Script modified 10/09/03 at the suggestion of Bill Gradwohl.


# Here we observe how 'getopts' processes command-line arguments to script.
# The arguments are parsed as "options" (flags) and associated arguments.

# Try invoking this script with:
#   'scriptname -mn'
#   'scriptname -oq qOption' (qOption can be some arbitrary string.)
#   'scriptname -qXXX -r'
#
#   'scriptname -qr'
#+      - Unexpected result, takes "r" as the argument to option "q"
#   'scriptname -q -r'=20
#+      - Unexpected result, same as above
#   'scriptname -mnop -mnop'  - Unexpected result
#   (OPTIND is unreliable at stating where an option came from.)
#
#  If an option expects an argument ("flag:"), then it will grab
#+ whatever is next on the command-line.

NO_ARGS=3D0=20
E_OPTERROR=3D85

if [ $# -eq "$NO_ARGS" ]    # Script invoked with no command-line args?
then
  echo "Usage: `basename $0` options (-mnopqrs)"
  exit $E_OPTERROR          # Exit and explain usage.
                            # Usage: scriptname -options
                            # Note: dash (-) necessary
fi =20


while getopts ":mnopq:rs" Option
do
  case $Option in
    m     ) echo "Scenario #1: option -m-   [OPTIND=3D${OPTIND}]";;
    n | o ) echo "Scenario #2: option -$Option-   [OPTIND=3D${OPTIND}]";;
    p     ) echo "Scenario #3: option -p-   [OPTIND=3D${OPTIND}]";;
    q     ) echo "Scenario #4: option -q-\
                  with argument \"$OPTARG\"   [OPTIND=3D${OPTIND}]";;
    #  Note that option 'q' must have an associated argument,
    #+ otherwise it falls through to the default.
    r | s ) echo "Scenario #5: option -$Option-";;
    *     ) echo "Unimplemented option chosen.";;   # Default.
  esac
done

shift $(($OPTIND - 1))
#  Decrements the argument pointer so it points to next argument.
#  $1 now references the first non-option item supplied on the command-line
#+ if one exists.

exit $?

#   As Bill Gradwohl states,
#  "The getopts mechanism allows one to specify:  scriptname -mnop -mnop
#+  but there is no reliable way to differentiate what came
#+ from where by using OPTIND."
#  There are, however, workarounds.</pre></font></td></tr></tbody></table><=
/div></dd></dl></div><p></p><div class=3D"VARIABLELIST"><p><b><a name=3D"IN=
TSCRBEH1"></a>Script Behavior</b></p><dl><dt><a name=3D"SOURCEREF"></a><b c=
lass=3D"COMMAND">source</b>, <span class=3D"TOKEN">.</span> (<a href=3D"htt=
ps://tldp.org/LDP/abs/html/special-chars.html#DOTREF">dot</a> command)</dt>=
<dd><p>This command, when invoked from the command-line,
	      executes a script. Within a script, a
	      <tt class=3D"USERINPUT"><b>source file-name</b></tt>
	      loads the file <tt class=3D"FILENAME">file-name</tt>.
	      <i class=3D"FIRSTTERM">Sourcing</i> a file (dot-command)
	      <i class=3D"FIRSTTERM">imports</i>
	     code into the script, appending to the script (same effect
	     as the <tt class=3D"USERINPUT"><b>#include</b></tt> directive in a
	     <i class=3D"FIRSTTERM">C</i> program). The net result is the
	     same as if the <span class=3D"QUOTE">"sourced"</span> lines of code w=
ere
	     physically present in the body of the script. This is useful
	     in situations when multiple scripts use a common data file
	     or function library.</p><div class=3D"EXAMPLE"><a name=3D"EX38"></a><=
p><b>Example 15-22. <span class=3D"QUOTE">"Including"</span> a data file</b=
></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><=
font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
#  Note that this example must be invoked with bash, i.e., bash ex38.sh
#+ not  sh ex38.sh !

. data-file    # Load a data file.
# Same effect as "source data-file", but more portable.

#  The file "data-file" must be present in current working directory,
#+ since it is referred to by its basename.

# Now, let's reference some data from that file.

echo "variable1 (from data-file) =3D $variable1"
echo "variable3 (from data-file) =3D $variable3"

let "sum =3D $variable2 + $variable4"
echo "Sum of variable2 + variable4 (from data-file) =3D $sum"
echo "message1 (from data-file) is \"$message1\""
#                                  Escaped quotes
echo "message2 (from data-file) is \"$message2\""

print_message This is the message-print function in the data-file.


exit $?</pre></font></td></tr></tbody></table><p>File <tt class=3D"FILENAME=
">data-file</tt> for <a href=3D"https://tldp.org/LDP/abs/html/internal.html=
#EX38">Example 15-22</a>, above.  Must be present in same
		directory.</p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbod=
y><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING"># This is a=
 data file loaded by a script.
# Files of this type may contain variables, functions, etc.
# It loads with a 'source' or '.' command from a shell script.

# Let's initialize some variables.

variable1=3D23
variable2=3D474
variable3=3D5
variable4=3D97

message1=3D"Greetings from *** line $LINENO *** of the data file!"
message2=3D"Enough for now. Goodbye."

print_message ()
{   # Echoes any message passed to it.

  if [ -z "$1" ]
  then
    return 1 # Error, if argument missing.
  fi

  echo

  until [ -z "$1" ]
  do             # Step through arguments passed to function.
    echo -n "$1" # Echo args one at a time, suppressing line feeds.
    echo -n " "  # Insert spaces between words.
    shift        # Next one.
  done =20

  echo

  return 0
}</pre></font></td></tr></tbody></table></div><p>If the <i class=3D"FIRSTTE=
RM">sourced</i> file is itself
	       an executable script, then it will run, then return
	       control to the script that called it. A
	       <i class=3D"FIRSTTERM">sourced</i> executable script may use a
	      <a href=3D"https://tldp.org/LDP/abs/html/complexfunct.html#RETURNREF=
">return</a> for this
	      purpose.</p><p><a name=3D"SOURCEPARAMS"></a></p><p>	      Arguments =
may be (optionally) passed to the
	      <i class=3D"FIRSTTERM">sourced</i> file as <a href=3D"https://tldp.o=
rg/LDP/abs/html/othertypesv.html#POSPARAMREF1">positional parameters</a>.
	       <table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><t=
d><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">source $filename $a=
rg1 arg2</pre></font></td></tr></tbody></table>
	    </p><p>It is even possible for a script to
	    <i class=3D"FIRSTTERM">source</i> itself, though this does not
	    seem to have any practical applications.</p><div class=3D"EXAMPLE"><a =
name=3D"SELFSOURCE"></a><p><b>Example 15-23. A (useless) script that source=
s itself</b></p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbod=
y><tr><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# self-source.sh: a script sourcing itself "recursively."
# From "Stupid Script Tricks," Volume II.

MAXPASSCNT=3D100    # Maximum number of execution passes.

echo -n  "$pass_count  "
#  At first execution pass, this just echoes two blank spaces,
#+ since $pass_count still uninitialized.

let "pass_count +=3D 1"
#  Assumes the uninitialized variable $pass_count
#+ can be incremented the first time around.
#  This works with Bash and pdksh, but
#+ it relies on non-portable (and possibly dangerous) behavior.
#  Better would be to initialize $pass_count to 0 before incrementing.

while [ "$pass_count" -le $MAXPASSCNT ]
do
  . $0   # Script "sources" itself, rather than calling itself.
         # ./$0 (which would be true recursion) doesn't work here. Why?
done =20

#  What occurs here is not actually recursion,
#+ since the script effectively "expands" itself, i.e.,
#+ generates a new section of code
#+ with each pass through the 'while' loop',
#  with each 'source' in line 20.
#
#  Of course, the script interprets each newly 'sourced' "#!" line
#+ as a comment, and not as the start of a new script.

echo

exit 0   # The net effect is counting from 1 to 100.
         # Very impressive.

# Exercise:
# --------
# Write a script that uses this trick to actually do something useful.</pre=
></font></td></tr></tbody></table></div></dd><dt><a name=3D"EXITREF"></a><b=
 class=3D"COMMAND">exit</b></dt><dd><p>Unconditionally terminates a script.
		    <a name=3D"AEN9393" href=3D"https://tldp.org/LDP/abs/html/internal.ht=
ml#FTN.AEN9393"><span class=3D"footnote">[6]</span></a>
	        The <b class=3D"COMMAND">exit</b> command may optionally take an
		integer argument, which is returned to the shell as
		the <a href=3D"https://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSR=
EF">exit status</a>
		of the script. It is good practice to end all but the
		simplest scripts with an <tt class=3D"USERINPUT"><b>exit 0</b></tt>,
		indicating a successful run.</p><div class=3D"NOTE"><p></p><table class=
=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><td width=3D"25" align=3D"C=
ENTER" valign=3D"TOP"><img src=3D"https://tldp.org/LDP/abs/images/note.gif"=
 hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT" valign=3D"TOP"><p>If a s=
cript terminates with an <b class=3D"COMMAND">exit</b>
	      lacking an argument, the exit status of the script is the exit
	      status of the last command executed in the script, not counting
	      the <b class=3D"COMMAND">exit</b>. This is equivalent to an
	      <b class=3D"COMMAND">exit $?</b>.</p></td></tr></tbody></table></div=
><div class=3D"NOTE"><p></p><table class=3D"NOTE" width=3D"90%" border=3D"0=
"><tbody><tr><td width=3D"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"h=
ttps://tldp.org/LDP/abs/images/note.gif" hspace=3D"5" alt=3D"Note"></td><td=
 align=3D"LEFT" valign=3D"TOP"><p>An <b class=3D"COMMAND">exit</b> command =
may also be used to
	      terminate a <a href=3D"https://tldp.org/LDP/abs/html/subshells.html#=
SUBSHELLSREF">subshell</a>.</p></td></tr></tbody></table></div></dd><dt><a =
name=3D"EXECREF"></a><b class=3D"COMMAND">exec</b></dt><dd><p>	      This s=
hell builtin replaces the current process with
	      a specified command. Normally, when the shell encounters
	      a command, it <a href=3D"https://tldp.org/LDP/abs/html/internal.html=
#FORKREF">forks off</a> a
	      child process to actually execute the command.  Using the
	      <b class=3D"COMMAND">exec</b> builtin, the shell does not fork,
	      and the command <i class=3D"FIRSTTERM">exec</i>'ed replaces
	      the shell.  When used in a script, therefore, it forces an
	      exit from the script when the <b class=3D"COMMAND">exec</b>'ed
	      command terminates.
		<a name=3D"AEN9425" href=3D"https://tldp.org/LDP/abs/html/internal.html#F=
TN.AEN9425"><span class=3D"footnote">[7]</span></a>
	    </p><div class=3D"EXAMPLE"><a name=3D"EX54"></a><p><b>Example 15-24. E=
ffects of <i class=3D"FIRSTTERM">exec</i></b></p><table border=3D"0" bgcolo=
r=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre cla=
ss=3D"PROGRAMLISTING">#!/bin/bash

exec echo "Exiting \"$0\" at line $LINENO."   # Exit from script here.
# $LINENO is an internal Bash variable set to the line number it's on.

# ----------------------------------
# The following lines never execute.

echo "This echo fails to echo."

exit 99                       #  This script will not exit here.
                              #  Check exit value after script terminates
                              #+ with an 'echo $?'.
                              #  It will *not* be 99.</pre></font></td></tr=
></tbody></table></div><div class=3D"EXAMPLE"><a name=3D"SELFEXEC"></a><p><=
b>Example 15-25. A script that <i class=3D"FIRSTTERM">exec's</i> itself</b>=
</p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><f=
ont color=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash
# self-exec.sh

# Note: Set permissions on this script to 555 or 755,
#       then call it with ./self-exec.sh or sh ./self-exec.sh.

echo

echo "This line appears ONCE in the script, yet it keeps echoing."
echo "The PID of this instance of the script is still $$."
#     Demonstrates that a subshell is not forked off.

echo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Hit Ctl-=
C to exit =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"

sleep 1

exec $0   #  Spawns another instance of this same script
          #+ that replaces the previous one.

echo "This line will never echo!"  # Why not?

exit 99                            # Will not exit here!
                                   # Exit code will not be 99!</pre></font>=
</td></tr></tbody></table></div><p>An <b class=3D"COMMAND">exec</b> also se=
rves to <a href=3D"https://tldp.org/LDP/abs/html/x17974.html#USINGEXECREF">=
reassign
	      file descriptors</a>.	For example, <tt class=3D"USERINPUT"><b>exec
	      &lt;zzz-file</b></tt> replaces <tt class=3D"FILENAME">stdin</tt>
	      with the file <tt class=3D"FILENAME">zzz-file</tt>.</p><div class=3D=
"NOTE"><p></p><table class=3D"NOTE" width=3D"90%" border=3D"0"><tbody><tr><=
td width=3D"25" align=3D"CENTER" valign=3D"TOP"><img src=3D"https://tldp.or=
g/LDP/abs/images/note.gif" hspace=3D"5" alt=3D"Note"></td><td align=3D"LEFT=
" valign=3D"TOP"><p>The <tt class=3D"OPTION">-exec</tt> option to
	      <a href=3D"https://tldp.org/LDP/abs/html/moreadv.html#FINDREF">find<=
/a> is
	      <tt class=3D"REPLACEABLE"><i>not</i></tt> the same as the
	      <b class=3D"COMMAND">exec</b> shell builtin.</p></td></tr></tbody></=
table></div></dd><dt><a name=3D"SHOPTREF"></a><b class=3D"COMMAND">shopt</b=
></dt><dd><p>This command permits changing <i class=3D"FIRSTTERM">shell
	      options</i> on the fly (see <a href=3D"https://tldp.org/LDP/abs/html=
/aliases.html#AL">Example 25-1</a>
	      and <a href=3D"https://tldp.org/LDP/abs/html/aliases.html#UNAL">Exam=
ple 25-2</a>).  It often appears in the Bash
	      <a href=3D"https://tldp.org/LDP/abs/html/files.html#FILESREF1">start=
up files</a>, but also has
	      its uses in scripts. Needs <a href=3D"https://tldp.org/LDP/abs/html/=
bashver2.html#BASH2REF">version
	      2</a> or later of Bash.</p><p><table border=3D"0" bgcolor=3D"#E0E0E0=
" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"PROGRA=
MLISTING">shopt -s cdspell
# Allows minor misspelling of directory names with 'cd'
# Option -s sets, -u unsets.

cd /hpme  # Oops! Mistyped '/home'.
pwd       # /home
          # The shell corrected the misspelling.</pre></font></td></tr></tb=
ody></table></p></dd><dt><b class=3D"COMMAND">caller</b><a name=3D"CALLERRE=
F"></a></dt><dd><p>Putting a <b class=3D"COMMAND">caller</b> command
	       inside a <a href=3D"https://tldp.org/LDP/abs/html/functions.html#FU=
NCTIONREF">function</a>
	       echoes to <tt class=3D"FILENAME">stdout</tt> information about
	       the <i class=3D"FIRSTTERM">caller</i> of that function.</p><p><tabl=
e border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=
=3D"#000000"><pre class=3D"PROGRAMLISTING">#!/bin/bash

function1 ()
{
  # Inside function1 ().
  caller 0   # Tell me about it.
}

function1    # Line 9 of script.

# 9 main test.sh
# ^                 Line number that the function was called from.
#   ^^^^            Invoked from "main" part of script.
#        ^^^^^^^    Name of calling script.

caller 0     # Has no effect because it's not inside a function.</pre></fon=
t></td></tr></tbody></table></p><p>A <b class=3D"COMMAND">caller</b> comman=
d can also return
	      <i class=3D"FIRSTTERM">caller</i> information from a script <a href=
=3D"https://tldp.org/LDP/abs/html/internal.html#SOURCEREF">sourced</a> with=
in another
	      script. Analogous to a function, this is a <span class=3D"QUOTE">"su=
broutine
	      call."</span></p><p>You may find this command useful in debugging.</=
p></dd></dl></div><p></p><div class=3D"VARIABLELIST"><p><b><a name=3D"INTCO=
MMAND1"></a>Commands</b></p><dl><dt><a name=3D"TRUEREF"></a><b class=3D"COM=
MAND">true</b></dt><dd><p>A command that returns a successful
	    (<span class=3D"RETURNVALUE">zero</span>) <a href=3D"https://tldp.org/=
LDP/abs/html/exit-status.html#EXITSTATUSREF">exit status</a>, but does
	    nothing else.
	  </p><p>	      <table border=3D"1" bgcolor=3D"#E0E0E0" width=3D"90%"><tbo=
dy><tr><td><font color=3D"#000000"><pre class=3D"SCREEN"><tt class=3D"PROMP=
T">bash$ </tt><tt class=3D"USERINPUT"><b>true</b></tt>
<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>echo $?</b></tt>
<tt class=3D"COMPUTEROUTPUT">0</tt>
	      </pre></font></td></tr></tbody></table>
	    </p><p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><t=
r><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING"># Endless loop
while true   # alias for ":"
do
   operation-1
   operation-2
   ...
   operation-n
   # Need a way to break out of loop or script will hang.
done</pre></font></td></tr></tbody></table></p></dd><dt><a name=3D"FALSEREF=
"></a><b class=3D"COMMAND">false</b></dt><dd><p>A command that returns an u=
nsuccessful <a href=3D"https://tldp.org/LDP/abs/html/exit-status.html#EXITS=
TATUSREF">exit status</a>,
	    but does nothing else.</p><p>	      <table border=3D"1" bgcolor=3D"#E0=
E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><pre class=3D"SC=
REEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>false</b><=
/tt>
<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>echo $?</b></tt>
<tt class=3D"COMPUTEROUTPUT">1</tt>
	      </pre></font></td></tr></tbody></table>
	    </p><p><table border=3D"0" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><t=
r><td><font color=3D"#000000"><pre class=3D"PROGRAMLISTING"># Testing "fals=
e"=20
if false
then
  echo "false evaluates \"true\""
else
  echo "false evaluates \"false\""
fi
# false evaluates "false"


# Looping while "false" (null loop)
while false
do
   # The following code will not execute.
   operation-1
   operation-2
   ...
   operation-n
   # Nothing happens!
done   </pre></font></td></tr></tbody></table></p></dd><dt><a name=3D"TYPER=
EF"></a><b class=3D"COMMAND">type [cmd]</b></dt><dd><p>Similar to the <a hr=
ef=3D"https://tldp.org/LDP/abs/html/filearchiv.html#WHICHREF">which</a> ext=
ernal command,
	    <b class=3D"COMMAND">type cmd</b> identifies
	    <span class=3D"QUOTE">"cmd."</span> Unlike <b class=3D"COMMAND">which<=
/b>,
	    <b class=3D"COMMAND">type</b> is a Bash builtin. The useful
	    <tt class=3D"OPTION">-a</tt> option to <b class=3D"COMMAND">type</b>
	    identifies <tt class=3D"REPLACEABLE"><i>keywords</i></tt>
	    and <tt class=3D"REPLACEABLE"><i>builtins</i></tt>, and also locates
	    system commands with identical names.</p><p>	      <table border=3D"1"=
 bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><td><font color=3D"#000000"><=
pre class=3D"SCREEN"><tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT=
"><b>type '['</b></tt>
<tt class=3D"COMPUTEROUTPUT">[ is a shell builtin</tt>
<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>type -a '['</b><=
/tt>
<tt class=3D"COMPUTEROUTPUT">[ is a shell builtin
 [ is /usr/bin/[</tt>


<tt class=3D"PROMPT">bash$ </tt><tt class=3D"USERINPUT"><b>type type</b></t=
t>
<tt class=3D"COMPUTEROUTPUT">type is a shell builtin</tt>
	      </pre></font></td></tr></tbody></table>
	    </p><p>The <b class=3D"COMMAND">type</b> command can be useful
              for <a href=3D"https://tldp.org/LDP/abs/html/special-chars.ht=
ml#DEVNULLREDIRECT">testing whether a
              certain command exists</a>.</p></dd><dt><a name=3D"HASHCMDREF=
"></a><b class=3D"COMMAND">hash [cmds]</b></dt><dd><p>Records the <i class=
=3D"FIRSTTERM">path</i>
	    name of specified commands -- in the shell <i class=3D"FIRSTTERM">hash
	    table</i>

	        <a name=3D"AEN9591" href=3D"https://tldp.org/LDP/abs/html/internal=
.html#FTN.AEN9591"><span class=3D"footnote">[8]</span></a>
	     =20
              -- so the shell or script will not need to search the
              <a href=3D"https://tldp.org/LDP/abs/html/internalvariables.ht=
ml#PATHREF">$PATH</a> on subsequent calls to those
              commands. When <b class=3D"COMMAND">hash</b> is called with n=
o
	      arguments, it simply lists the commands that have been hashed.
	      The <tt class=3D"OPTION">-r</tt> option resets the hash table.</p></=
dd><dt><a name=3D"BINDREF"></a><b class=3D"COMMAND">bind</b></dt><dd><p>The=
 <b class=3D"COMMAND">bind</b> builtin displays or modifies
	  <i class=3D"FIRSTTERM">readline</i>
	    <a name=3D"AEN9621" href=3D"https://tldp.org/LDP/abs/html/internal.htm=
l#FTN.AEN9621"><span class=3D"footnote">[9]</span></a>
	  key bindings.</p></dd><dt><a name=3D"HELPREF"></a><b class=3D"COMMAND">h=
elp</b></dt><dd><p>Gets a short usage summary of a shell builtin. This is
	    the counterpart to <a href=3D"https://tldp.org/LDP/abs/html/filearchiv=
.html#WHATISREF">whatis</a>,
	    but for builtins. The display of <i class=3D"FIRSTTERM">help</i>
	    information got a much-needed update in the <a href=3D"https://tldp.or=
g/LDP/abs/html/bashver4.html#BASH4REF">version 4 release</a> of Bash.</p><p=
>	      <table border=3D"1" bgcolor=3D"#E0E0E0" width=3D"90%"><tbody><tr><t=
d><font color=3D"#000000"><pre class=3D"SCREEN"><tt class=3D"PROMPT">bash$ =
</tt><tt class=3D"USERINPUT"><b>help exit</b></tt>
<tt class=3D"COMPUTEROUTPUT">exit: exit [n]
    Exit the shell with a status of N.  If N is omitted, the exit status
    is that of the last command executed.</tt>
	      </pre></font></td></tr></tbody></table>
	      </p></dd></dl></div></div><h3 class=3D"FOOTNOTES">Notes</h3><table b=
order=3D"0" class=3D"FOOTNOTES" width=3D"100%"><tbody><tr><td align=3D"LEFT=
" valign=3D"TOP" width=3D"5%"><a name=3D"FTN.AEN8607" href=3D"https://tldp.=
org/LDP/abs/html/internal.html#AEN8607"><span class=3D"footnote">[1]</span>=
</a></td><td align=3D"LEFT" valign=3D"TOP" width=3D"95%"><p>As Nathan Coult=
er points out, "while forking a
	  process is a low-cost operation, executing a new program in
	  the newly-forked child process adds more
	  overhead."</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP" width=3D"5=
%"><a name=3D"FTN.AEN8650" href=3D"https://tldp.org/LDP/abs/html/internal.h=
tml#AEN8650"><span class=3D"footnote">[2]</span></a></td><td align=3D"LEFT"=
 valign=3D"TOP" width=3D"95%"><p>An exception to this is the <a href=3D"htt=
ps://tldp.org/LDP/abs/html/timedate.html#TIMREF">time</a> command, listed i=
n the
	     official Bash documentation as a keyword (<span class=3D"QUOTE">"rese=
rved
	     word"</span>).</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP" wid=
th=3D"5%"><a name=3D"FTN.AEN9009" href=3D"https://tldp.org/LDP/abs/html/int=
ernal.html#AEN9009"><span class=3D"footnote">[3]</span></a></td><td align=
=3D"LEFT" valign=3D"TOP" width=3D"95%"><p>Note that <i class=3D"FIRSTTERM">=
let</i>
          <a href=3D"https://tldp.org/LDP/abs/html/gotchas.html#LETBAD">can=
not be used
          for setting <i class=3D"FIRSTTERM">string</i>
          variables.</a></p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP"=
 width=3D"5%"><a name=3D"FTN.AEN9199" href=3D"https://tldp.org/LDP/abs/html=
/internal.html#AEN9199"><span class=3D"footnote">[4]</span></a></td><td ali=
gn=3D"LEFT" valign=3D"TOP" width=3D"95%"><p>To <i class=3D"FIRSTTERM">Expor=
t</i>
	      information is to make it available in a more general context.
	      See also <a href=3D"https://tldp.org/LDP/abs/html/subshells.html#SCO=
PEREF">scope</a>.</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP" width=
=3D"5%"><a name=3D"FTN.AEN9289" href=3D"https://tldp.org/LDP/abs/html/inter=
nal.html#AEN9289"><span class=3D"footnote">[5]</span></a></td><td align=3D"=
LEFT" valign=3D"TOP" width=3D"95%"><p>An <i class=3D"FIRSTTERM">option</i> =
is an
		argument that acts as a flag, switching script behaviors
		on or off. The argument associated with a particular
		option indicates the behavior that the option (flag)
		switches on or off.</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP" wi=
dth=3D"5%"><a name=3D"FTN.AEN9393" href=3D"https://tldp.org/LDP/abs/html/in=
ternal.html#AEN9393"><span class=3D"footnote">[6]</span></a></td><td align=
=3D"LEFT" valign=3D"TOP" width=3D"95%"><p>Technically, an
		    <b class=3D"COMMAND">exit</b> only terminates the
		    process (or shell) in which it is running,
		    <em>not</em> the <i class=3D"FIRSTTERM">parent
		    process</i>.</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP" width=
=3D"5%"><a name=3D"FTN.AEN9425" href=3D"https://tldp.org/LDP/abs/html/inter=
nal.html#AEN9425"><span class=3D"footnote">[7]</span></a></td><td align=3D"=
LEFT" valign=3D"TOP" width=3D"95%"><p>Unless the <b class=3D"COMMAND">exec<=
/b> is used
		   to <a href=3D"https://tldp.org/LDP/abs/html/x17974.html#USINGEXECREF">=
reassign file
		   descriptors</a>.</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP" wi=
dth=3D"5%"><a name=3D"FTN.AEN9591" href=3D"https://tldp.org/LDP/abs/html/in=
ternal.html#AEN9591"><span class=3D"footnote">[8]</span></a></td><td align=
=3D"LEFT" valign=3D"TOP" width=3D"95%"><p><a name=3D"HASHREF"></a></p><p><i=
 class=3D"FIRSTTERM">Hashing</i> is a method of
		creating lookup keys for data stored in a table. The
		<em>data items themselves</em> are
		<span class=3D"QUOTE">"scrambled"</span> to create keys, using one of
		a number of simple mathematical
		<i class=3D"FIRSTTERM">algorithms</i> (methods, or
		recipes).</p><p>An advantage of <i class=3D"FIRSTTERM">hashing</i> is tha=
t
		it is fast. A disadvantage is that
		<i class=3D"FIRSTTERM">collisions</i> -- where a single key
		maps to more than one data item -- are possible.</p><p>For examples of ha=
shing see <a href=3D"https://tldp.org/LDP/abs/html/contributed-scripts.html=
#HASHLIB">Example A-20</a> and
		  <a href=3D"https://tldp.org/LDP/abs/html/contributed-scripts.html#HASHE=
XAMPLE">Example A-21</a>.</p></td></tr><tr><td align=3D"LEFT" valign=3D"TOP=
" width=3D"5%"><a name=3D"FTN.AEN9621" href=3D"https://tldp.org/LDP/abs/htm=
l/internal.html#AEN9621"><span class=3D"footnote">[9]</span></a></td><td al=
ign=3D"LEFT" valign=3D"TOP" width=3D"95%"><p><a name=3D"READLINEREF"></a>Th=
e
            <i class=3D"FIRSTTERM">readline</i> library is what
            Bash uses for reading input in an
            interactive shell.</p></td></tr></tbody></table><div class=3D"N=
AVFOOTER"><hr align=3D"LEFT" width=3D"100%"><table summary=3D"Footer naviga=
tion table" width=3D"100%" border=3D"0" cellpadding=3D"0" cellspacing=3D"0"=
><tbody><tr><td width=3D"33%" align=3D"left" valign=3D"top"><a href=3D"http=
s://tldp.org/LDP/abs/html/part4.html" accesskey=3D"P">Prev</a></td><td widt=
h=3D"34%" align=3D"center" valign=3D"top"><a href=3D"https://tldp.org/LDP/a=
bs/html/index.html" accesskey=3D"H">Home</a></td><td width=3D"33%" align=3D=
"right" valign=3D"top"><a href=3D"https://tldp.org/LDP/abs/html/x9644.html"=
 accesskey=3D"N">Next</a></td></tr><tr><td width=3D"33%" align=3D"left" val=
ign=3D"top">Commands</td><td width=3D"34%" align=3D"center" valign=3D"top">=
<a href=3D"https://tldp.org/LDP/abs/html/part4.html" accesskey=3D"U">Up</a>=
</td><td width=3D"33%" align=3D"right" valign=3D"top">Job Control Commands<=
/td></tr></tbody></table></div></body></html>
------MultipartBoundary--0nBzcJsifzsNPRQQvEP6qo4aYXSQJv2izPdiq0y2LX----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://tldp.org/LDP/abs/images/note.gif

R0lGODdhGAAYAPcAAAAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwgICAkJCQoKCgsLCwwMDA0NDQ4O
Dg8PDxAQEBERERISEhMTExQUFBUVFRYWFhcXFxgYGBkZGRoaGhsbGxwcHB0dHR4eHh8fHyAgICEh
ISIiIiMjIyQkJCUlJSYmJicnJygoKCkpKSoqKisrKywsLC0tLS4uLi8vLzAwMDExMTIyMjMzMzQ0
NDU1NTY2Njc3Nzg4ODk5OTo6Ojs7Ozw8PD09PT4+Pj8/P0BAQEFBQUJCQkNDQ0REREVFRUZGRkdH
R0hISElJSUpKSktLS0xMTE1NTU5OTk9PT1BQUFFRUVJSUlNTU1RUVFVVVVZWVldXV1hYWFlZWVpa
WltbW1xcXF1dXV5eXl9fX2BgYGFhYWJiYmNjY2RkZGVlZWZmZmdnZ2hoaGlpaWpqamtra2xsbG1t
bW5ubm9vb3BwcHFxcXJycnNzc3R0dHV1dXZ2dnd3d3h4eHl5eXp6ent7e3x8fH19fX5+fn9/f4CA
gIGBgYKCgoODg4SEhIWFhYaGhoeHh4iIiImJiYqKiouLi4yMjI2NjY6Ojo+Pj5CQkJGRkZKSkpOT
k5SUlJWVlZaWlpeXl5iYmJmZmZqampubm5ycnJ2dnZ6enp+fn6CgoKGhoaKioqOjo6SkpKWlpaam
pqenp6ioqKmpqaqqqqurq6ysrK2tra6urq+vr7CwsLGxsbKysrOzs7S0tLW1tba2tre3t7i4uLm5
ubq6uru7u7y8vL29vb6+vr+/v8DAwMHBwcLCwsPDw8TExMXFxcbGxsfHx8jIyMnJycrKysvLy8zM
zM3Nzc7Ozs/Pz9DQ0NHR0dLS0tPT09TU1NXV1dbW1tfX19jY2NnZ2dra2tvb29zc3N3d3d7e3t/f
3+Dg4OHh4eLi4uPj4+Tk5OXl5ebm5ufn5+jo6Onp6erq6uvr6+zs7O3t7e7u7u/v7/Dw8PHx8fLy
8vPz8/T09PX19fb29vf39/j4+Pn5+fr6+vv7+/z8/P39/f7+/v///ywAAAAAGAAYAAAI/gD/CRxI
8JxBgwQTKhTYqxSlUhAfOluY8J0xRqWsnXvH8ZwxSpQmUjz30BvFf84o1Vr4rtTKkwJb9qpIaSZM
gjUJOit1s2IpkwJ/9ky4U2BRgsZ61VLay9tBhP9KnYvq7Z01a6UY1XLmzZozRoQgRqR0bus5qSC3
CjyX0pizOU29dQ3pjWxGsgPfURqjRYmUPTVrLTX2jqS3u1MZ7uF6mNK/d48H1j3rjVFivXNU9sK4
kCRlSntKcVyzx6uxPUATnv1Xy5rAWiHXbJ4zxqbCUhOxxjwtJTMhYxRbQo4q8p/T4yd72caaeOjO
4a95Dv3HqPjAXpSgU/xqnSBswp2/FMPEilHuOW87tTaHiR4kSNzaBwYEADs=

------MultipartBoundary--0nBzcJsifzsNPRQQvEP6qo4aYXSQJv2izPdiq0y2LX----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://tldp.org/LDP/abs/images/caution.gif

R0lGODdhGAAYAPcAAAAAAAgIABAQABgYACEhADExAEJCAFpaAGNjAGtrAHNzAHt7AISEAISEc4yM
AIyMc4yMjJSUAJSUc5SUe5ycAJycc5yce5yclJycnKWlAKWlY6WlnKWlpbW1ALW1WrW1Y7W1tb29
AL29Y87OAM7OztbWANbWztbW1t7eAN7eMd7eOd7eQufnAOfnMefnOefn5+/vAO/v7/f3APf3EPf3
GPf3Mff39///AP//EP//GP//////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////ywAAAAAGAAYAAAI9AB1CBxI
sKDBgwhfxEDIkCCJBhsWNkRIQsIKDxckTiT4osEKGTQ+cNC48WENGShlfIi4UUdFFShZwADpYeRE
EhNgyuhQAAELGThqkixY0UVKBQAGdEAZFMNQgR0/Hk26FGVImw4bnEwpg4KAAiW4qmQp8KXYnQIM
/ORKQ6iOqGdljBhwYC1bDSB0xODggcZZFgMSzBSrYgIJgTE2fPiLwMHZFhIOD9z7wW/KEgsi2JXR
AoJkgok94EjJAACBEClVREa4VzTKDAQMhJXhwsLng60tl1irwvbGxIu5Qr7dkLLlzsQnhsahOvlv
DhoMt8QNwvnAgAAAOw==

------MultipartBoundary--0nBzcJsifzsNPRQQvEP6qo4aYXSQJv2izPdiq0y2LX----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://tldp.org/LDP/abs/images/tip.gif

R0lGODdhGQAYAPcAAAAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwgICAkJCQoKCgsLCwwMDA0NDQ4O
Dg8PDxAQEBERERISEhMTExQUFBUVFRYWFhcXFxgYGBkZGRoaGhsbGxwcHB0dHR4eHh8fHyAgICEh
ISIiIiMjIyQkJCUlJSYmJicnJygoKCkpKSoqKisrKywsLC0tLS4uLi8vLzAwMDExMTIyMjMzMzQ0
NDU1NTY2Njc3Nzg4ODk5OTo6Ojs7Ozw8PD09PT4+Pj8/P0BAQEFBQUJCQkNDQ0REREVFRUZGRkdH
R0hISElJSUpKSktLS0xMTE1NTU5OTk9PT1BQUFFRUVJSUlNTU1RUVFVVVVZWVldXV1hYWFlZWVpa
WltbW1xcXF1dXV5eXl9fX2BgYGFhYWJiYmNjY2RkZGVlZWZmZmdnZ2hoaGlpaWpqamtra2xsbG1t
bW5ubm9vb3BwcHFxcXJycnNzc3R0dHV1dXZ2dnd3d3h4eHl5eXp6ent7e3x8fH19fX5+fn9/f4CA
gIGBgYKCgoODg4SEhIWFhYaGhoeHh4iIiImJiYqKiouLi4yMjI2NjY6Ojo+Pj5CQkJGRkZKSkpOT
k5SUlJWVlZaWlpeXl5iYmJmZmZqampubm5ycnJ2dnZ6enp+fn6CgoKGhoaKioqOjo6SkpKWlpaam
pqenp6ioqKmpqaqqqqurq6ysrK2tra6urq+vr7CwsLGxsbKysrOzs7S0tLW1tba2tre3t7i4uLm5
ubq6uru7u7y8vL29vb6+vr+/v8DAwMHBwcLCwsPDw8TExMXFxcbGxsfHx8jIyMnJycrKysvLy8zM
zM3Nzc7Ozs/Pz9DQ0NHR0dLS0tPT09TU1NXV1dbW1tfX19jY2NnZ2dra2tvb29zc3N3d3d7e3t/f
3+Dg4OHh4eLi4uPj4+Tk5OXl5ebm5ufn5+jo6Onp6erq6uvr6+zs7O3t7e7u7u/v7/Dw8PHx8fLy
8vPz8/T09PX19fb29vf39/j4+Pn5+fr6+vv7+/z8/P39/f7+/v///ywAAAAAGQAYAAAI6gD/CRxI
8JxBgwQTKhR4zlgpSqUiQnR2b2HCe70mnru3sSElSs4sMoToTaQziBbvUepVUeS/c6VqKVTZSyHM
cwpXJnRWquXAe3tCrMFZsFRJhqWIErw3B4IWpQN5RpW50JvRhSqJXlXIaM8eqgprhYTpk2AIAADW
lB14jtLLngsp5Ui7duRbqD/H0F3Y9m3df/f0quXr9iZWwX+9uf0n9vBehaVC/rPqeHBCw4Ajz0Ss
sFfNgVbxMg2xZy1PvBEVejMmmSCj1gRrUcKr0NlrkQ+N/T0n25jLyZQYGT14EiJti+eKf4x8/F9A
AAA7

------MultipartBoundary--0nBzcJsifzsNPRQQvEP6qo4aYXSQJv2izPdiq0y2LX------
