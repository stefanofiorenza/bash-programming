From: <Saved by Blink>
Snapshot-Content-Location: https://www.assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/
Subject: assert_not magic?
Date: Tue, 29 Sep 2020 17:09:30 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----"


------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/html
Content-ID: <frame-F4CA66FD0D00D2876B5340B1410B9FEB@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/=
css" href=3D"cid:css-749fcd5b-06a0-46f0-9eeb-249511f95c4d@mhtml.blink" /><l=
ink rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-e7b03bb0-9796-4101=
-8023-1d345fd3e4b2@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css=
" href=3D"cid:css-76b00f78-0cc8-4eea-9125-cefa1586f04a@mhtml.blink" /><link=
 rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-4ffe2777-3699-438c-93=
9f-f90594e7ffee@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" h=
ref=3D"cid:css-47861d86-a25e-405a-badb-61496b7c0488@mhtml.blink" /><link re=
l=3D"stylesheet" type=3D"text/css" href=3D"cid:css-3b19265a-3ac5-49ab-88fb-=
29a5d0281355@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=
=3D"cid:css-61a49268-261e-4574-91d8-5b771974bae1@mhtml.blink" /><link rel=
=3D"stylesheet" type=3D"text/css" href=3D"cid:css-3c669f38-d931-4600-9a64-7=
1e3868c9507@mhtml.blink" />

    <!-- Bootstrap Setup -->
   =20
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1">
    <meta name=3D"ROBOTS" content=3D"INDEX,FOLLOW">
    <meta name=3D"description" content=3D"Bash has lots of brackets and thi=
s is a cheat sheet to help you remember which ones to use.">
    <meta name=3D"keywords" content=3D"blog, code, developer, programming, =
learning, teaching, dev, Ryan, Ryan Palo, bash, shell, cheatsheet">
    <meta name=3D"twitter:card" content=3D"summary_large_image">
    <meta name=3D"twitter:title" content=3D"assert_not magic? | Bash Bracke=
ts Quick Reference">
    <meta name=3D"twitter:site" content=3D"@paytastic">
    <meta name=3D"twitter:description" content=3D"Bash has lots of brackets=
 and this is a cheat sheet to help you remember which ones to use.">
    <meta name=3D"twitter:image" content=3D"https://res.cloudinary.com/duni=
nnjce/image/upload/h_300,w_600,q_auto,f_auto/brackets.jpg">
    <meta name=3D"twitter:creator" content=3D"@paytastic">
    <meta name=3D"og:url" content=3D"http://assertnotmagic.com/2018/06/20/b=
ash-brackets-quick-reference/">
    <meta name=3D"og:title" content=3D"assert_not magic? | Bash Brackets Qu=
ick Reference">
    <meta name=3D"og:description" content=3D"Bash has lots of brackets and =
this is a cheat sheet to help you remember which ones to use.">
    <meta name=3D"og:image" content=3D"https://res.cloudinary.com/duninnjce=
/image/upload/w_300,q_auto,f_auto/brackets.jpg">

    <!-- Favicon settings -->
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://www.as=
sertnotmagic.com/apple-touch-icon.png">
    <link rel=3D"icon" type=3D"image/png" sizes=3D"32x32" href=3D"https://w=
ww.assertnotmagic.com/favicon-32x32.png">
    <link rel=3D"icon" type=3D"image/png" sizes=3D"16x16" href=3D"https://w=
ww.assertnotmagic.com/favicon-16x16.png">
    <link rel=3D"manifest" href=3D"https://www.assertnotmagic.com/manifest.=
json">
    <link rel=3D"mask-icon" href=3D"https://www.assertnotmagic.com/safari-p=
inned-tab.svg" color=3D"#222222">
    <meta name=3D"theme-color" content=3D"#ffffff">

    <!-- Omnisearch -->
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"search assert_not magic" href=3D"https://www.assertnotmagic.com/opens=
earch.xml">

    <!-- Custom CSS -->
    <link rel=3D"stylesheet" href=3D"https://www.assertnotmagic.com/css/mai=
n.css">

    <link rel=3D"stylesheet" href=3D"https://www.assertnotmagic.com/css/pri=
sm.css">
    <title>assert_not magic?</title>
</head>

<body><div id=3D"MathJax_Message" style=3D"display: none;"></div>
   =20
<nav id=3D"main-nav">
    <a href=3D"https://www.assertnotmagic.com/" class=3D"mobile-home">asser=
t_not magic?</a>
    <ul>
        <li class=3D"logo"><a href=3D"https://www.assertnotmagic.com/">asse=
rt_not magic?</a></li>
        <li><a href=3D"https://www.assertnotmagic.com/posts/">All Posts</a>=
</li>
        <li><a href=3D"https://www.assertnotmagic.com/about/">About Ryan</a=
></li>
        <li><a href=3D"https://www.assertnotmagic.com/tags/">Tags</a></li>
        <li><a href=3D"https://www.assertnotmagic.com/uses/">Uses</a></li>
    </ul>
</nav>
    <div class=3D"container main">
        <article class=3D"site-wrap">
    <div id=3D"cover">
       =20
        <img alt=3D"Cover Image" class=3D"cover-image" src=3D"https://res.c=
loudinary.com/duninnjce/image/upload/w_600/brackets.jpg">=20
    </div>
    <h1>Bash Brackets Quick Reference</h1>
   =20
       =20
       =20

       =20
            <small>
            2828
         words.  Time to Read: About 28 minutes.</small>
       =20
   =20
   =20
    <p><em>Cover image credit: <a href=3D"https://www.fonts.com/content/lea=
rning/fontology/level-4/fine-typography/braces-and-brackets">Fonts.com</a><=
/em></p>

<p>Bash has lots of different kinds of brackets.  Like, many much lots.  It=
 adds meaning to doubling up different brackets, and a dollar sign in front=
 means something even more different.  <em>And</em>, the brackets are used =
differently than many other languages.  I constantly find myself doing a 5-=
second search for which one is the right one to do since I=E2=80=99m not wr=
iting Bash scripts all the time.  So here, I=E2=80=99m going to lay them al=
l out and then print this article out and staple it to the wall by my desk.=
  Possibly with a decorative frame.  So here we go.</p>

<p>A tiny note on all of these is that Bash generally likes to see a space =
between round or square brackets and whatever=E2=80=99s inside.  It doesn=
=E2=80=99t like space where curly braces are concerned.  We=E2=80=99ll go t=
hrough in order of net total squigglyness (NTS score).</p>

<h2 id=3D"-single-parentheses-">( Single Parentheses )</h2>

<p>The first usage for single parenthesis is running commands inside in a <=
strong>subshell</strong>.  This means that they run through all of the comm=
ands inside, and then return a single exit code.  Any variables declared or=
 environment changes will get cleaned up and disappeared.  Because it=E2=80=
=99s within a subshell, if you have it inside a loop, it will run a little =
slower than if you called the commands <em>without</em> the parentheses.</p=
>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">a<span class=3D"token operator">=3D</span><span class=3D"toke=
n string">'This string'</span>
<span class=3D"token punctuation">(</span> a<span class=3D"token operator">=
=3D</span>banana<span class=3D"token punctuation">;</span> <span class=3D"t=
oken function">mkdir</span> <span class=3D"token variable">$a</span> <span =
class=3D"token punctuation">)</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$a</span>
<span class=3D"token comment"># =3D&gt; 'This string'</span>
<span class=3D"token function">ls</span>
<span class=3D"token comment"># =3D&gt; ...</span>
<span class=3D"token comment"># =3D&gt; banana/</span></code></pre><div cla=
ss=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div clas=
s=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>The second usage is in declaring arrays.  Now, arrays and associative ar=
rays are only available in newer versions of Bash, and there are a lot of w=
eird edge cases and syntax rules that make it easy to make mistakes using t=
hem=E2=80=93so much so that I try to steer Bash newbies clear of their usag=
e unless they=E2=80=99re definitely the right tool to use.  But, for comple=
teness=E2=80=99s sake:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">cheeses<span class=3D"token operator">=3D</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">'cheddar'</span=
> <span class=3D"token string">'swiss'</span> <span class=3D"token string">=
'provolone'</span> <span class=3D"token string">'brie'</span><span class=3D=
"token punctuation">)</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 string">"<span class=3D"token variable">${cheeses[2]}</span>"</span>
<span class=3D"token comment"># =3D&gt; swiss</span>
cheeses+<span class=3D"token operator">=3D</span><span class=3D"token strin=
g">'american'</span>
<span class=3D"token keyword keyword-for">for</span> cheese <span class=3D"=
token keyword keyword-in">in</span> <span class=3D"token variable">$cheeses=
</span><span class=3D"token punctuation">;</span> <span class=3D"token keyw=
ord keyword-do">do</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"<span class=3D"token variable">$cheese</span>"</span>
<span class=3D"token keyword keyword-done">done</span>
<span class=3D"token comment"># =3D&gt; cheddar</span>
<span class=3D"token comment"># =3D&gt; swiss</span>
<span class=3D"token comment"># =3D&gt; provolone</span>
<span class=3D"token comment"># =3D&gt; brie</span>
<span class=3D"token comment"># =3D&gt; american</span></code></pre><div cl=
ass=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div cla=
ss=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>In the input inside the parentheses, Bash uses the current environment v=
ariable <code>$IFS</code> (field separator) and will split the array string=
 on any character found in <code>$IFS</code>.  So one way you can split a s=
tring on a character is something like this:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">grade_string<span class=3D"token operator">=3D</span><span cl=
ass=3D"token string">'A;B;F;D;C;A-'</span>
IFS<span class=3D"token operator">=3D</span><span class=3D"token string">';=
'</span> grades<span class=3D"token operator">=3D</span><span class=3D"toke=
n punctuation">(</span><span class=3D"token variable">$grade_string</span><=
span class=3D"token punctuation">)</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 string">"<span class=3D"token variable">${grades[1]}</span>"</span>
<span class=3D"token comment"># =3D&gt; B</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 string">"<span class=3D"token variable">${grades[3]}</span>"</span>
<span class=3D"token comment"># =3D&gt; D</span></code></pre><div class=3D"=
toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"t=
oolbar-item"><a>Copy</a></div></div></div>

<p>There=E2=80=99s a whole bunch more to dive into here, and a ton of gotch=
as to look out for, but that=E2=80=99s a whole nother article.  I=E2=80=99l=
l put it on the list of drafts to write.  This should give you enough of a =
feel to not freak out if you see it in somebody=E2=80=99s Bash script, thou=
gh.  :)</p>

<p><em>Thanks Davide for bringing up this use case for parentheses.</em></p=
>

<h2 id=3D"-double-parentheses-">(( Double Parentheses ))</h2>

<p>This is for use in integer arithmetic.  You can perform assignments, log=
ical operations, and mathematic operations like multiplication or modulo in=
side these parentheses.  However, do note that there is no output.  Any var=
iable changes that happen inside them will stick, but don=E2=80=99t expect =
to be able to assign the result to anything.  If the result inside is <stro=
ng>non-zero</strong>, it returns a <strong>zero</strong> (success) exit cod=
e.  If the result inside is <strong>zero</strong>, it returns an exit code =
of <strong>1</strong>.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">i<span class=3D"token operator">=3D</span>4
<span class=3D"token variable"><span class=3D"token punctuation">((</span> =
i <span class=3D"token operator">+</span><span class=3D"token operator">=3D=
</span> <span class=3D"token number">3</span> <span class=3D"token punctuat=
ion">))</span></span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$i</span>
<span class=3D"token comment"># =3D&gt; 7</span>
<span class=3D"token variable"><span class=3D"token punctuation">((</span> =
<span class=3D"token number">4</span> <span class=3D"token operator">+</spa=
n> <span class=3D"token number">8</span> <span class=3D"token punctuation">=
))</span></span>
<span class=3D"token comment"># =3D&gt; No Output</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$?</span>  <span class=3D"token comment"># Check the exit code o=
f the last command</span>
<span class=3D"token comment"># =3D&gt; 0</span>
<span class=3D"token variable"><span class=3D"token punctuation">((</span> =
<span class=3D"token number">5</span> <span class=3D"token operator">-</spa=
n> <span class=3D"token number">5</span> <span class=3D"token punctuation">=
))</span></span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$?</span>
<span class=3D"token comment"># =3D&gt; 1</span>

<span class=3D"token comment"># Strings inside get considered 'zero'.</span=
>
<span class=3D"token variable"><span class=3D"token punctuation">((</span> =
i <span class=3D"token operator">+</span><span class=3D"token operator">=3D=
</span> POO <span class=3D"token punctuation">))</span></span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$i</span>
<span class=3D"token comment"># =3D&gt; 7</span>

<span class=3D"token comment"># You can't use it in an expression</span>
a<span class=3D"token operator">=3D</span><span class=3D"token variable"><s=
pan class=3D"token punctuation">((</span> <span class=3D"token number">4</s=
pan> <span class=3D"token operator">+</span> <span class=3D"token number">1=
</span> <span class=3D"token punctuation">))</span></span>
<span class=3D"token comment"># =3D&gt; bash: syntax error near unexpected =
token '('</span></code></pre><div class=3D"toolbar"><div class=3D"toolbar-i=
tem"><span>Bash</span></div><div class=3D"toolbar-item"><a>Copy</a></div></=
div></div>

<h2 id=3D"-angle-parentheses-">&lt;( Angle Parentheses )</h2>

<p><em>Thank you to <a href=3D"https://dev.to/ferricoxide">Thomas H Jones I=
I</a> for <a href=3D"https://dev.to/ferricoxide/comment/3pdn">this comment<=
/a> that inspired this section on Process Substitution</em></p>

<p>This is known as a <em>process substitution</em>.  It=E2=80=99s a lot li=
ke a pipe, except you can use it anywhere a command expects a file argument=
.  And you can use multiple at once!</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token function">sort</span> -nr -k 5 <span cla=
ss=3D"token operator">&lt;</span><span class=3D"token punctuation">(</span>=
 <span class=3D"token function">ls</span> -l /bin <span class=3D"token punc=
tuation">)</span> <span class=3D"token operator">&lt;</span><span class=3D"=
token punctuation">(</span> <span class=3D"token function">ls</span> -l /us=
r/bin <span class=3D"token punctuation">)</span> <span class=3D"token opera=
tor">&lt;</span><span class=3D"token punctuation">(</span> <span class=3D"t=
oken function">ls</span> -l /sbin <span class=3D"token punctuation">)</span=
>

<span class=3D"token comment"># =3D&gt; Like a billion lines of output that=
 contain many of the</span>
<span class=3D"token comment"># =3D&gt; executables on your computer, sorte=
d in order of descending size.</span>

<span class=3D"token comment"># Just in case you don't magically remember a=
ll bash flags,</span>
<span class=3D"token comment"># -nr  means sort numerically in reverse (des=
cending) order</span>
<span class=3D"token comment"># -k 5 means sort by Kolumn 5.  In this case,=
 for `ls -l`, that is the "file size"</span></code></pre><div class=3D"tool=
bar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"toolb=
ar-item"><a>Copy</a></div></div></div>

<p>This works because the sort command expects one or many filenames as arg=
uments.  Behind the scenes, the <code>&lt;( stuff )</code> actually outputs=
 the name of a temporary file (unnamed pipe file) for the <code>sort</code>=
 command to use.</p>

<p>Another example of where this comes in handy is the use of the <code>com=
m</code> command, which spits out the lines that the files have in common. =
 Because <code>comm</code> needs its input files to be sorted, you could ei=
ther do this:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token comment"># The lame way</span>
<span class=3D"token function">sort</span> file1 <span class=3D"token opera=
tor">&gt;</span> file1.sorted
<span class=3D"token function">sort</span> file2 <span class=3D"token opera=
tor">&gt;</span> file2.sorted
<span class=3D"token function">comm</span> -12 file1.sorted file2.sorted</c=
ode></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</sp=
an></div><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>Ooooor, you can be a total BAshMF and do it this way:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token comment"># The baller way</span>
<span class=3D"token function">comm</span> -12 <span class=3D"token operato=
r">&lt;</span><span class=3D"token punctuation">(</span> <span class=3D"tok=
en function">sort</span> file1 <span class=3D"token punctuation">)</span> <=
span class=3D"token operator">&lt;</span><span class=3D"token punctuation">=
(</span> <span class=3D"token function">sort</span> file2 <span class=3D"to=
ken punctuation">)</span></code></pre><div class=3D"toolbar"><div class=3D"=
toolbar-item"><span>Bash</span></div><div class=3D"toolbar-item"><a>Copy</a=
></div></div></div>

<h2 id=3D"-dollar-single-parentheses-">$( Dollar Single Parentheses )</h2>

<p>This is for interpolating a subshell command output into a string.  The =
command inside gets run inside a subshell, and then any output gets placed =
into whatever string you=E2=80=99re building.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">intro<span class=3D"token operator">=3D</span><span class=3D"=
token string">"My name is <span class=3D"token variable"><span class=3D"tok=
en variable">$(</span> <span class=3D"token function">whoami</span> <span c=
lass=3D"token variable">)</span></span>"</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$intro</span>
<span class=3D"token comment"># =3D&gt; My name is ryan</span>

<span class=3D"token comment"># And just to prove that it's a subshell...</=
span>
a<span class=3D"token operator">=3D</span>5
b<span class=3D"token operator">=3D</span><span class=3D"token variable"><s=
pan class=3D"token variable">$(</span> a<span class=3D"token operator">=3D<=
/span>1000<span class=3D"token punctuation">;</span> <span class=3D"token k=
eyword keyword-echo">echo</span> $a <span class=3D"token variable">)</span>=
</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$b</span>
<span class=3D"token comment"># =3D&gt; 1000</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$a</span>
<span class=3D"token comment"># =3D&gt; 5</span></code></pre><div class=3D"=
toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"t=
oolbar-item"><a>Copy</a></div></div></div>

<h2 id=3D"-dollar-single-parentheses-dollar-q-">$( Dollar Single Parenthese=
s Dollar Q )$?</h2>

<p><em>Shoutout again to <a href=3D"https://dev.to/ferricoxide/comment/3pdn=
">Thomas</a> for the tip!</em></p>

<p>If you want to interpolate a command, but only the exit code and not the=
 value, this is what you use.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-if">if</span> <span clas=
s=3D"token punctuation">[</span><span class=3D"token punctuation">[</span> =
<span class=3D"token variable"><span class=3D"token variable">$(</span> <sp=
an class=3D"token function">grep</span> -q PATTERN FILE <span class=3D"toke=
n variable">)</span></span><span class=3D"token variable">$?</span> <span c=
lass=3D"token punctuation">]</span><span class=3D"token punctuation">]</spa=
n>
<span class=3D"token keyword keyword-then">then</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Dat pattern was totally in dat file!"</span>
<span class=3D"token keyword keyword-else">else</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"NOPE."</span>
<span class=3D"token keyword keyword-fi">fi</span></code></pre><div class=
=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=
=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>Although, really, this isn=E2=80=99t so much a special bracket pattern a=
s it is an interesting use of <code>$?</code>, since the above works even i=
f there is a space between the <code>$( stuff )</code> and the <code>$?</co=
de>.  But a neat tip, nonetheless.</p>

<p>However, in Bash, <code>if</code> statements will process the <code>then=
</code> branch if the expression after <code>if</code> has an exit code of =
0 and the <code>else</code> branch otherwise, so, in this case, <em>Matthew=
</em> notes that we can drop all of the fancy stuff and simplify to:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-if">if</span> <span clas=
s=3D"token function">grep</span> -q PATTERN FILE<span class=3D"token punctu=
ation">;</span> <span class=3D"token keyword keyword-then">then</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Vee haf found eet!"</span>
<span class=3D"token keyword keyword-else">else</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"No.  Lame."</span>
<span class=3D"token keyword keyword-fi">fi</span></code></pre><div class=
=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=
=3D"toolbar-item"><a>Copy</a></div></div></div>

<h2 id=3D"-dollar-double-parentheses-">$(( Dollar Double Parentheses ))</h2=
>

<p>Remember how regular <strong>(( Double Parentheses ))</strong> don=E2=80=
=99t output anything?  Remember how that is kind of annoying?  Well, you ca=
n use <strong>$(( Dollar Double Parentheses ))</strong> to perform an <stro=
ng>Arithmetic Interpolation</strong>, which is just a fancy way of saying, =
=E2=80=9CPlace the output result into this string.=E2=80=9D</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">a<span class=3D"token operator">=3D</span><span class=3D"toke=
n variable"><span class=3D"token variable">$((</span> <span class=3D"token =
number">16</span> <span class=3D"token operator">+</span> <span class=3D"to=
ken number">2</span> <span class=3D"token variable">))</span></span>
message<span class=3D"token operator">=3D</span><span class=3D"token string=
">"I don't want to brag, but I have like <span class=3D"token variable"><sp=
an class=3D"token variable">$((</span> a <span class=3D"token operator">/</=
span> <span class=3D"token number">2</span> <span class=3D"token variable">=
))</span></span> friends."</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$message</span>
<span class=3D"token comment"># =3D&gt; I don't want to brag, but I have li=
ke 9 friends."</span>

b<span class=3D"token operator">=3D</span><span class=3D"token variable"><s=
pan class=3D"token variable">$((</span> a <span class=3D"token operator">*<=
/span><span class=3D"token operator">=3D</span> <span class=3D"token number=
">2</span> <span class=3D"token variable">))</span></span>			<span class=3D=
"token comment"># You can even do assignments.  The last value calculated w=
ill be the output.</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$b</span>
<span class=3D"token comment"># =3D&gt; 36</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$a</span>
<span class=3D"token comment"># =3D&gt; 36</span></code></pre><div class=3D=
"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"=
toolbar-item"><a>Copy</a></div></div></div>

<p>One thing to remember is that this is strictly integer arithmetic.  No d=
ecimals.  Look into <a href=3D"https://www.lifewire.com/use-the-bc-calculat=
or-in-scripts-2200588"><code>bc</code></a> for floating point calculations.=
</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-echo">echo</span> <span =
class=3D"token variable"><span class=3D"token variable">$((</span> <span cl=
ass=3D"token number">9</span> <span class=3D"token operator">/</span> <span=
 class=3D"token number">2</span> <span class=3D"token variable">))</span></=
span>  <span class=3D"token comment"># You might expect 4.5</span>
<span class=3D"token comment"># =3D&gt; 4</span>

<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable"><span class=3D"token variable">$((</span> <span class=3D"token n=
umber">9</span> <span class=3D"token operator">/</span> <span class=3D"toke=
n number">2.5</span> <span class=3D"token variable">))</span></span>
<span class=3D"token comment"># =3D&gt; bash: 9 / 2.5 : syntax error: inval=
id arithmetic operator (error token is ".5 ")</span></code></pre><div class=
=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=
=3D"toolbar-item"><a>Copy</a></div></div></div>

<h2 id=3D"-single-square-brackets-">[ Single Square Brackets ]</h2>

<p>This is an alternate version of the built-in <code>test</code>.  The com=
mands inside are run and checked for =E2=80=9Ctruthiness.=E2=80=9D  Strings=
 of zero length are false.  Strings of length one or more (even if those ch=
aracters are whitespace) are true.</p>

<p><a href=3D"http://tldp.org/LDP/abs/html/fto.html">Here are a list of all=
 of the file-related tests you could do</a>, like checking if a file exists=
 or if it=E2=80=99s a directory.</p>

<p><a href=3D"https://www.tldp.org/LDP/abs/html/comparison-ops.html">Here a=
re a list of all of the string-related and integer-related tests you could =
do</a>, like checking if two strings are equal or if one is zero-length, or=
 if one number is bigger than another.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-if">if</span> <span clas=
s=3D"token punctuation">[</span> -f my_friends.txt <span class=3D"token pun=
ctuation">]</span>
<span class=3D"token keyword keyword-then">then</span>
	<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"toke=
n string">"I'm so loved!"</span>
<span class=3D"token keyword keyword-else">else</span>
	<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"toke=
n string">"I'm so alone."</span>
<span class=3D"token keyword keyword-fi">fi</span></code></pre><div class=
=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=
=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>One last thing that=E2=80=99s important to note is that <code>test</code=
> and <code>[</code> are actually shell commands.  <code>[[ ]]</code> is ac=
tually <em>part of the shell language itself</em>.  What this means is that=
 the stuff inside of Double Square Brackets isn=E2=80=99t treated like argu=
ments.  The reason you would use Single Square Brackets is if you need to d=
o <em>word splitting</em> or <em>filename expansion</em>.</p>

<p>Here=E2=80=99s an illustration of the difference.  Let=E2=80=99s say you=
 used Double Square Brackets in the following way.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token punctuation">[</span><span class=3D"toke=
n punctuation">[</span> -f *.txt <span class=3D"token punctuation">]</span>=
<span class=3D"token punctuation">]</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$?</span>
<span class=3D"token comment"># =3D&gt; 1</span></code></pre><div class=3D"=
toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"t=
oolbar-item"><a>Copy</a></div></div></div>

<p>False, there is no file explicitly named =E2=80=9C[asterisk].txt=E2=80=
=9D.  Let=E2=80=99s assume there are currently no <code>.txt</code> files i=
n our directory.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token comment"># If there's no files .txt file=
s:</span>
<span class=3D"token punctuation">[</span> -f *.txt <span class=3D"token pu=
nctuation">]</span><span class=3D"token punctuation">;</span> <span class=
=3D"token keyword keyword-echo">echo</span> <span class=3D"token variable">=
$?</span>
<span class=3D"token comment"># =3D&gt; 1</span></code></pre><div class=3D"=
toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"t=
oolbar-item"><a>Copy</a></div></div></div>

<p><code>*.txt</code> gets expanded to a blank string, which is not  a file=
, and <em>then</em> the test gets evaluated.  Let=E2=80=99s create a txt fi=
le.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token function">touch</span> cool_beans.txt
<span class=3D"token comment"># Now there's exactly one .txt file</span>
<span class=3D"token punctuation">[</span> -f *.txt <span class=3D"token pu=
nctuation">]</span><span class=3D"token punctuation">;</span> <span class=
=3D"token keyword keyword-echo">echo</span> <span class=3D"token variable">=
$?</span>
<span class=3D"token comment"># =3D&gt; 0</span></code></pre><div class=3D"=
toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"t=
oolbar-item"><a>Copy</a></div></div></div>

<p><code>*.txt</code> gets expanded to a space-separated list of matching f=
ilenames: =E2=80=9Ccool_beans.txt=E2=80=9D, and then the test gets evaluate=
d with that one argument.  Since the file exists, the test passes.  But wha=
t if there=E2=80=99s two files?</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token function">touch</span> i_smell_trouble.t=
xt  <span class=3D"token comment"># bean pun.  #sorrynotsorry</span>
<span class=3D"token comment"># Now there's two files</span>
<span class=3D"token punctuation">[</span> -f *.txt <span class=3D"token pu=
nctuation">]</span>
<span class=3D"token comment"># =3D&gt; bash: [: too many arguments.</span>=
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p><code>*.txt</code> gets expanded to =E2=80=9Ccool_beans.txt i_smell_trou=
ble.txt=E2=80=9D, and then the test is evaluated.  Bash counts each of the =
filenames as an argument, receives 3 arguments instead of the two it was ex=
pecting, and blurffs.</p>

<p>Just to hammer my point home: even though there are currently two <code>=
.txt</code> files, this next test still fails.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token punctuation">[</span><span class=3D"toke=
n punctuation">[</span> -f *.txt <span class=3D"token punctuation">]</span>=
<span class=3D"token punctuation">]</span><span class=3D"token punctuation"=
>;</span> <span class=3D"token keyword keyword-echo">echo</span> <span clas=
s=3D"token variable">$?</span>
<span class=3D"token comment"># =3D&gt; 1.  There is still no file called *=
.txt</span></code></pre><div class=3D"toolbar"><div class=3D"toolbar-item">=
<span>Bash</span></div><div class=3D"toolbar-item"><a>Copy</a></div></div><=
/div>

<p>I tried to come up with some examples of why you would want this, but I =
couldn=E2=80=99t come up with realistic ones.</p>

<blockquote>
  <p>For the most part, it seems like, a good rule of thumb is: if you need=
 to use <code>test</code> or <code>[ ]</code>, you=E2=80=99ll know it.  If =
you=E2=80=99re not sure if you need it, you probably don=E2=80=99t need it =
and  you should probably use <strong>[[ double square brackets ]]</strong> =
to avoid a lot of the tricky gotchas of the <code>test</code> command.  If =
your shell is modern enough to have them.</p>
</blockquote>

<h2 id=3D"-double-square-brackets-">[[ Double Square Brackets ]]</h2>

<p>True/false testing.  Read through the section above for an explanation o=
f the differences between single and double square brackets.  Additionally,=
 double square brackets support extended regular expression matching.  Use =
quotes around the second argument to force a raw match instead of a regex m=
atch.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">pie<span class=3D"token operator">=3D</span>good
<span class=3D"token punctuation">[</span><span class=3D"token punctuation"=
>[</span> <span class=3D"token variable">$pie</span> <span class=3D"token o=
perator">=3D</span>~ d <span class=3D"token punctuation">]</span><span clas=
s=3D"token punctuation">]</span><span class=3D"token punctuation">;</span> =
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$?</span>
<span class=3D"token comment"># =3D&gt; 0, it matches the regex!</span>

<span class=3D"token punctuation">[</span><span class=3D"token punctuation"=
>[</span> <span class=3D"token variable">$pie</span> <span class=3D"token o=
perator">=3D</span>~ <span class=3D"token punctuation">[</span>aeiou<span c=
lass=3D"token punctuation">]</span>d <span class=3D"token punctuation">]</s=
pan><span class=3D"token punctuation">]</span><span class=3D"token punctuat=
ion">;</span> <span class=3D"token keyword keyword-echo">echo</span> <span =
class=3D"token variable">$?</span>
<span class=3D"token comment"># =3D&gt; 0, still matches</span>

<span class=3D"token punctuation">[</span><span class=3D"token punctuation"=
>[</span> <span class=3D"token variable">$pie</span> <span class=3D"token o=
perator">=3D</span>~ <span class=3D"token punctuation">[</span>aei<span cla=
ss=3D"token punctuation">]</span>d <span class=3D"token punctuation">]</spa=
n><span class=3D"token punctuation">]</span><span class=3D"token punctuatio=
n">;</span> <span class=3D"token keyword keyword-echo">echo</span> <span cl=
ass=3D"token variable">$?</span>
<span class=3D"token comment"># =3D&gt; 1, no match</span>

<span class=3D"token punctuation">[</span><span class=3D"token punctuation"=
>[</span> <span class=3D"token variable">$pie</span> <span class=3D"token o=
perator">=3D</span>~ <span class=3D"token string">"[aeiou]d"</span> <span c=
lass=3D"token punctuation">]</span><span class=3D"token punctuation">]</spa=
n><span class=3D"token punctuation">;</span> <span class=3D"token keyword k=
eyword-echo">echo</span> <span class=3D"token variable">$?</span>
<span class=3D"token comment"># =3D&gt; 1, no match because there's no lite=
ral '[aeoiu]d' inside the word "good"</span></code></pre><div class=3D"tool=
bar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"toolb=
ar-item"><a>Copy</a></div></div></div>

<p>Also, inside double square brackets, <code>&lt;</code> and <code>&gt;</c=
ode> sort by your locale.  Inside single square brackets, it=E2=80=99s by y=
our machine=E2=80=99s sorting order, which is usually ASCII.</p>

<h2 id=3D"function-parensbraces---">Function Parens/Braces() { =E2=80=A6 }<=
/h2>

<p>Functions are a little bit stranger in Bash than many other languages.  =
First of all, there=E2=80=99s several ways to define them, that are all tot=
ally equivalent:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-function">function</span=
> hi_there<span class=3D"token punctuation">(</span><span class=3D"token pu=
nctuation">)</span> <span class=3D"token punctuation">{</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Hi"</span>
<span class=3D"token punctuation">}</span>

hi_there<span class=3D"token punctuation">(</span><span class=3D"token punc=
tuation">)</span> <span class=3D"token punctuation">{</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Hi"</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword keyword-function">function</span> hi_there <sp=
an class=3D"token punctuation">{</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Hi"</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token comment"># All above versions work fine with the C-sty=
le brace</span>
<span class=3D"token comment"># arrangement too.</span>
hi_there<span class=3D"token punctuation">(</span><span class=3D"token punc=
tuation">)</span>
<span class=3D"token punctuation">{</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Hi"</span>
<span class=3D"token punctuation">}</span></code></pre><div class=3D"toolba=
r"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"toolbar=
-item"><a>Copy</a></div></div></div>

<p>Every single one of these defines a function called <code>hi_there</code=
>.  The round parentheses are there <em>solely</em> for decoration.  In oth=
er languages, you might put your expected parameters there.  Not so in Bash=
.  Bash doesn=E2=80=99t give a rat=E2=80=99s patootie what you want people =
to pass your function.  Usually, if people are nice, you=E2=80=99ll see the=
 expected parameters named at the top of the function:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-function">function</span=
> hi_there<span class=3D"token punctuation">(</span><span class=3D"token pu=
nctuation">)</span> <span class=3D"token punctuation">{</span>
  name<span class=3D"token operator">=3D</span><span class=3D"token string"=
>"<span class=3D"token variable">$1</span>"</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Hi <span class=3D"token variable">$name!</span>"</span>
<span class=3D"token punctuation">}</span></code></pre><div class=3D"toolba=
r"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"toolbar=
-item"><a>Copy</a></div></div></div>

<p><em>Thanks for pointing out that I should probably mention this usage, R=
obert!</em></p>

<h2 id=3D"-single-curly-braces-">{ Single Curly Braces }</h2>

<p>The first use for single curly braces is expansion.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-echo">echo</span> h<span=
 class=3D"token punctuation">{</span>a,e,i,o,u<span class=3D"token punctuat=
ion">}</span>p
<span class=3D"token comment"># =3D&gt; hap hep hip hop hup</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 string">"I am "</span><span class=3D"token punctuation">{</span>cool,great=
,awesome<span class=3D"token punctuation">}</span>
<span class=3D"token comment"># =3D&gt; I am cool I am great I am awesome</=
span>

<span class=3D"token function">mv</span> friends.txt<span class=3D"token pu=
nctuation">{</span>,.bak<span class=3D"token punctuation">}</span>
<span class=3D"token comment"># =3D&gt; braces are expanded first, so the c=
ommand is `mv friends.txt friends.txt.bak`</span></code></pre><div class=3D=
"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=3D"=
toolbar-item"><a>Copy</a></div></div></div>

<p>The cool thing is that you can make ranges as well!  With leading zeros!=
</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-echo">echo</span> <span =
class=3D"token punctuation">{</span>01<span class=3D"token punctuation">..<=
/span>10<span class=3D"token punctuation">}</span>
01 02 03 04 05 06 07 08 09 10
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 punctuation">{</span>01<span class=3D"token punctuation">..</span>10<span =
class=3D"token punctuation">..</span>3<span class=3D"token punctuation">}</=
span>
01 04 07 10</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item">=
<span>Bash</span></div><div class=3D"toolbar-item"><a>Copy</a></div></div><=
/div>

<p>They can also be used for grouping commands:</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token punctuation">[</span><span class=3D"toke=
n punctuation">[</span> <span class=3D"token string">"<span class=3D"token =
variable">$1</span>"</span> <span class=3D"token operator">=3D=3D</span> se=
cret <span class=3D"token punctuation">]</span><span class=3D"token punctua=
tion">]</span> <span class=3D"token operator">&amp;&amp;</span> <span class=
=3D"token punctuation">{</span>echo <span class=3D"token string">"The fox f=
lies at midnight"</span><span class=3D"token punctuation">;</span> <span cl=
ass=3D"token keyword keyword-echo">echo</span> <span class=3D"token string"=
>"Ssssshhhh..."</span><span class=3D"token punctuation">}</span></code></pr=
e><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div=
><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>These commands are all run together in a block, but no new subshell is s=
tarted.</p>

<p><em>Thanks for reminding me of this usage, Robert!</em></p>

<h2 id=3D"dollar-braces">${dollar braces}</h2>

<p>Note that there are no spaces around the contents.  This is for variable=
 interpolation.  You use it when normal string interpolation could get weir=
d</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token comment"># I want to say 'bananaificatio=
n'</span>
fruit<span class=3D"token operator">=3D</span>banana
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$fruitification</span>
<span class=3D"token comment"># =3D&gt; "" No output, because $fruitificati=
on is not a variable.</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">${fruit}</span>ification
<span class=3D"token comment"># =3D&gt; bananaification</span></code></pre>=
<div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><=
div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>The other thing you can use <strong>${Dollar Braces}</strong> for is var=
iable manipulation.  Here are a few common uses.</p>

<p>Using a default value if the variable isn=E2=80=99t defined.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-function">function</span=
> hello<span class=3D"token punctuation">(</span><span class=3D"token punct=
uation">)</span> <span class=3D"token punctuation">{</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Hello, <span class=3D"token variable">${1:-World}</span>!"</spa=
n>
<span class=3D"token punctuation">}</span>
hello Ryan
<span class=3D"token comment"># =3D&gt; Hello Ryan!</span>
hello
<span class=3D"token comment"># =3D&gt; Hello World!</span>

<span class=3D"token keyword keyword-function">function</span> sign_in<span=
 class=3D"token punctuation">(</span><span class=3D"token punctuation">)</s=
pan> <span class=3D"token punctuation">{</span>
	name<span class=3D"token operator">=3D</span><span class=3D"token variable=
">$1</span>
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en string">"Signing in as ${name:-<span class=3D"token variable"><span clas=
s=3D"token variable">$(</span> <span class=3D"token function">whoami</span>=
 <span class=3D"token variable">)</span></span>}"</span>
<span class=3D"token punctuation">}</span>
sign_in
<span class=3D"token comment"># =3D&gt; Signing in as ryan</span>
sign_in coolguy
<span class=3D"token comment"># =3D&gt; Signing in as coolguy</span></code>=
</pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span><=
/div><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>Getting the length of a variable.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">name<span class=3D"token operator">=3D</span><span class=3D"t=
oken string">"Ryan"</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 string">"Your name is <span class=3D"token variable">${#name}</span> lette=
rs long!"</span>
<span class=3D"token comment"># =3D&gt; Your name is 4 letters long!</span>=
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>Chopping off pieces that match a pattern.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">url<span class=3D"token operator">=3D</span>https://assertnot=
magic.com/about
<span class=3D"token keyword keyword-echo">echo</span> $<span class=3D"toke=
n punctuation">{</span>url<span class=3D"token comment">#*/}     # Remove f=
rom the front, matching the pattern */, non-greedy</span>
<span class=3D"token comment"># =3D&gt; /assertnotmagic.com/about</span>
<span class=3D"token keyword keyword-echo">echo</span> $<span class=3D"toke=
n punctuation">{</span>url<span class=3D"token comment">##*/}    # Same, bu=
t greedy</span>
<span class=3D"token comment"># =3D&gt; about</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">${url%/*}</span>     <span class=3D"token comment"># Remove from=
 the back, matching the pattern /*, non-greedy</span>
<span class=3D"token comment"># =3D&gt; https://assertnotmagic.com</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">${url%%/*}</span>    <span class=3D"token comment"># Same, but g=
reedy</span>
<span class=3D"token comment"># =3D&gt; https:/</span></code></pre><div cla=
ss=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div clas=
s=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>You can uppercase matching letters!</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-echo">echo</span> <span =
class=3D"token variable">${url^^a}</span>
<span class=3D"token comment"># =3D&gt; https://AssertnotmAgic.com/About</s=
pan></code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>B=
ash</span></div><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>You can get slices of strings.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-echo">echo</span> <span =
class=3D"token variable">${url:2:5}</span>  <span class=3D"token comment">#=
 the pattern is ${var:start:len}.  Start is zero-based.</span>
<span class=3D"token comment"># =3D&gt; tps://</span></code></pre><div clas=
s=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div class=
=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>You can replace patterns.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-echo">echo</span> <span =
class=3D"token variable">${url/https/ftp}</span>
<span class=3D"token comment"># =3D&gt; ftp://assertnotmagic.com</span>

<span class=3D"token comment"># Use a double slash for the first slash to d=
o a global replace</span>
<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">${url//[aeiou]/X}</span>
<span class=3D"token comment"># =3D&gt; https://XssXrtnXtmXgXc.cXm</span></=
code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</s=
pan></div><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>And, you can use variables indirectly <em>as the name of other variables=
</em>.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token keyword keyword-function">function</span=
> grades<span class=3D"token punctuation">(</span><span class=3D"token punc=
tuation">)</span> <span class=3D"token punctuation">{</span>
  name<span class=3D"token operator">=3D</span><span class=3D"token variabl=
e">$1</span>
  alice<span class=3D"token operator">=3D</span>A
  beth<span class=3D"token operator">=3D</span>B
  charles<span class=3D"token operator">=3D</span>C
  doofus<span class=3D"token operator">=3D</span>D
  <span class=3D"token keyword keyword-echo">echo</span> <span class=3D"tok=
en variable">${!name}</span>
<span class=3D"token punctuation">}</span>

grades alice
<span class=3D"token comment"># =3D&gt; A</span>
grades doofus
<span class=3D"token comment"># =3D&gt; D</span>
grades <span class=3D"token string">"Valoth the Unforgiving"</span>
<span class=3D"token comment"># =3D&gt; bash: : bad substitution.</span>
<span class=3D"token comment"># There is no variable called Valoth the Unfo=
rgiving,</span>
<span class=3D"token comment"># so it defaults to a blank value.</span>
<span class=3D"token comment"># Then, bash looks for a variable with a name=
 of "" and errors out.</span></code></pre><div class=3D"toolbar"><div class=
=3D"toolbar-item"><span>Bash</span></div><div class=3D"toolbar-item"><a>Cop=
y</a></div></div></div>

<h2 id=3D"double-angle-heredocs">=C2=ABDouble Angle Heredocs</h2>

<p>This is how you make multiline strings in Bash (one method).  Two arrows=
 and then a word =E2=80=93 any word that you choose =E2=80=93 to signal the=
 start of the string.  The string doesn=E2=80=99t end until you repeat your=
 magic word.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash">nice_message<span class=3D"token operator">=3D</span><span cl=
ass=3D"token operator">&lt;&lt;</span><span class=3D"token string">MESSAGE
Hi there!  I really like the way you look
when you are teaching newbies things
with empathy and compassion!
You rock!
MESSAGE</span>

<span class=3D"token keyword keyword-echo">echo</span> <span class=3D"token=
 variable">$nice_message</span>
<span class=3D"token comment"># =3D&gt; Hi there!  I really like the way yo=
u look</span>
<span class=3D"token comment"># =3D&gt; when you are teaching newbies thing=
s</span>
<span class=3D"token comment"># =3D&gt; with empathy and compassion!</span>
<span class=3D"token comment"># =3D&gt; You rock!</span></code></pre><div c=
lass=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div><div cl=
ass=3D"toolbar-item"><a>Copy</a></div></div></div>

<p>The word can be whatever you want.  I generally end up using =E2=80=9CHE=
REDOC=E2=80=9D to make it easier for future me.</p>

<p>One final trick is that, if you add a dash after the arrows, it suppress=
es any leading tabs (<em>but not spaces</em>) in your heredoc.</p>

<div class=3D"code-toolbar"><pre class=3D" language-bash"><code class=3D" l=
anguage-bash"><span class=3D"token function">cat</span> <span class=3D"toke=
n operator">&lt;&lt;</span>-HEREDOC
        two leading tabs
    one leading tab
  two spaces here
HEREDOC

<span class=3D"token comment"># =3D&gt; two leading tabs</span>
<span class=3D"token comment"># =3D&gt; one leading tab</span>
<span class=3D"token comment"># =3D&gt;   two spaces here</span></code></pr=
e><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash</span></div=
><div class=3D"toolbar-item"><a>Copy</a></div></div></div>

<h2 id=3D"punctuations-a-killer">Punctuation=E2=80=99s a Killer</h2>

<p>Hopefully this is helpful.  If you see something I missed or have anothe=
r cool use for one of these variants, be sure to let me know, and I=E2=80=
=99ll update it and publicly praise your genius.  Thanks for reading!</p>
=20
    <small>
        Author: Ryan Palo | Tags:=20
        <a href=3D"https://www.assertnotmagic.com/tags/bash/">bash</a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/shell/">shell</a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/cheatsheet/">cheatsh=
eet</a>
         |=20
<link href=3D"https://fonts.googleapis.com/css?family=3DLato&amp;subset=3Dl=
atin,latin-ext" rel=3D"stylesheet">
<a class=3D"bmc-button" target=3D"_blank" href=3D"https://www.buymeacoffee.=
com/octdCNRZG">
  <img src=3D"https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg" alt=
=3D"Buy me a coffee">
  <span style=3D"margin-left:5px">Buy me a coffee</span>
</a>
    </small>
     <div class=3D"email-background">
    <form class=3D"email-signup" action=3D"https://tinyletter.com/rpalo" me=
thod=3D"post" target=3D"popupwindow">
      <p>
        <label class=3D"email-text" for=3D"tlemail">Want to stay connected =
and get my newsletter?</label>
      </p>
      <p>
        <input class=3D"email-input" type=3D"text" name=3D"email" id=3D"tle=
mail">
       =20
        <input class=3D"email-button" type=3D"submit" value=3D"Subscribe">
      </p>

        <a class=3D"email-powered" href=3D"https://tinyletter.com/" target=
=3D"_blank">powered by TinyLetter</a>
      <p></p>
    </form>
</div> <hr>

<!-- Footer for Homepage -->
  <div id=3D"home-footer">
    <div id=3D"left-home-footer">
      <!-- Featured Posts List -->
      <h2>Featured Posts</h2>
      <ul class=3D"post-list">
        <li>
          <span class=3D"post-meta">Jan 18, 2017</span><br>
          <a class=3D"post-link" href=3D"https://www.assertnotmagic.com/201=
7/01/18/assert-not-magic/">Assert Not Magic</a>
        </li>
       =20
          <li>
            <span class=3D"post-meta">Jul 17, 2020</span><br>
            <a class=3D"post-link" href=3D"https://www.assertnotmagic.com/2=
020/07/17/dev-resume-advice/">I Asked DEV for Resume Advice and Here are 14=
 Things I Learned</a>
          </li>
       =20
          <li>
            <span class=3D"post-meta">Jun 19, 2020</span><br>
            <a class=3D"post-link" href=3D"https://www.assertnotmagic.com/2=
020/06/19/bash-return-multiple/">Returning Multiple Values (=E2=80=9CTuples=
=E2=80=9D-ish) from Bash Functions</a>
          </li>
       =20
          <li>
            <span class=3D"post-meta">Jun 9, 2020</span><br>
            <a class=3D"post-link" href=3D"https://www.assertnotmagic.com/d=
evjournal/2020/06/09/dev-journal/">Dev Journal 6/8/2020: Avoid the Pull of =
the Rabbit Hole</a>
          </li>
       =20
      </ul>
    </div>
    <div id=3D"center-home-footer">
      <!-- Spacer -->
    </div>
    <div id=3D"right-home-footer">
      <!-- Tags List -->
      <h2>Tags</h2>
      <p>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/python/" style=3D"fo=
nt-size: 50px">python | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/django/" style=3D"fo=
nt-size: 18px">django | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/rails/" style=3D"fon=
t-size: 16px">rails | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/algorithms/" style=
=3D"font-size: 18px">algorithms | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/editors/" style=3D"f=
ont-size: 16px">editors | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/emacs/" style=3D"fon=
t-size: 12px">emacs | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/ai/" style=3D"font-s=
ize: 10px">ai | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/r/" style=3D"font-si=
ze: 10px">r | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/tools/" style=3D"fon=
t-size: 14px">tools | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/javascript/" style=
=3D"font-size: 24px">javascript | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/not-magic/" style=3D=
"font-size: 12px">not-magic | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/soft-skills/" style=
=3D"font-size: 22px">soft-skills | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/tricks/" style=3D"fo=
nt-size: 44px">tricks | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/vscode/" style=3D"fo=
nt-size: 12px">vscode | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/vim/" style=3D"font-=
size: 16px">vim | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/sublime/" style=3D"f=
ont-size: 10px">sublime | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/puzzle/" style=3D"fo=
nt-size: 16px">puzzle | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/bash/" style=3D"font=
-size: 36px">bash | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/math/" style=3D"font=
-size: 14px">math | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/teaching/" style=3D"=
font-size: 12px">teaching | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/ruby/" style=3D"font=
-size: 34px">ruby | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/jekyll/" style=3D"fo=
nt-size: 14px">jekyll | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/git/" style=3D"font-=
size: 16px">git | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/physics/" style=3D"f=
ont-size: 10px">physics | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/fun/" style=3D"font-=
size: 14px">fun | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/scientific/" style=
=3D"font-size: 12px">scientific | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/pythonic/" style=3D"=
font-size: 12px">pythonic | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/functional/" style=
=3D"font-size: 16px">functional | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/vue/" style=3D"font-=
size: 18px">vue | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/es6/" style=3D"font-=
size: 16px">es6 | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/tutorial/" style=3D"=
font-size: 36px">tutorial | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/exercise/" style=3D"=
font-size: 10px">exercise | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/fitness/" style=3D"f=
ont-size: 10px">fitness | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/sysadmin/" style=3D"=
font-size: 14px">sysadmin | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/linux/" style=3D"fon=
t-size: 16px">linux | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/html/" style=3D"font=
-size: 14px">html | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/seo/" style=3D"font-=
size: 10px">seo | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/social/" style=3D"fo=
nt-size: 10px">social | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/metaprogramming/" st=
yle=3D"font-size: 10px">metaprogramming | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/css/" style=3D"font-=
size: 12px">css | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/front-end/" style=3D=
"font-size: 12px">front-end | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/animations/" style=
=3D"font-size: 10px">animations | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/p5/" style=3D"font-s=
ize: 16px">p5 | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/beginner/" style=3D"=
font-size: 32px">beginner | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/encouragement/" styl=
e=3D"font-size: 18px">encouragement | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/screencast/" style=
=3D"font-size: 10px">screencast | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/showdev/" style=3D"f=
ont-size: 12px">showdev | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/interview/" style=3D=
"font-size: 12px">interview | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/performance/" style=
=3D"font-size: 12px">performance | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/workflow/" style=3D"=
font-size: 10px">workflow | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/best-practice/" styl=
e=3D"font-size: 10px">best-practice | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/oss/" style=3D"font-=
size: 10px">oss | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/static-site/" style=
=3D"font-size: 10px">static-site | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/big-o/" style=3D"fon=
t-size: 10px">big-o | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/linked-lists/" style=
=3D"font-size: 10px">linked-lists | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/design-intent/" styl=
e=3D"font-size: 10px">design-intent | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/struct/" style=3D"fo=
nt-size: 10px">struct | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/browser/" style=3D"f=
ont-size: 10px">browser | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/focus/" style=3D"fon=
t-size: 10px">focus | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/productivity/" style=
=3D"font-size: 16px">productivity | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/codenewbie/" style=
=3D"font-size: 10px">codenewbie | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/reflection/" style=
=3D"font-size: 12px">reflection | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/update/" style=3D"fo=
nt-size: 12px">update | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/preview/" style=3D"f=
ont-size: 10px">preview | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/gtd/" style=3D"font-=
size: 10px">gtd | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/bullet-journal/" sty=
le=3D"font-size: 10px">bullet-journal | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/data-science/" style=
=3D"font-size: 10px">data-science | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/singleton/" style=3D=
"font-size: 10px">singleton | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/basics/" style=3D"fo=
nt-size: 18px">basics | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/powershell/" style=
=3D"font-size: 10px">powershell | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/terminal/" style=3D"=
font-size: 10px">terminal | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/security/" style=3D"=
font-size: 10px">security | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/scripting/" style=3D=
"font-size: 24px">scripting | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/itertools/" style=3D=
"font-size: 10px">itertools | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/shell/" style=3D"fon=
t-size: 12px">shell | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/quicktip/" style=3D"=
font-size: 10px">quicktip | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/cheatsheet/" style=
=3D"font-size: 10px">cheatsheet | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/fish/" style=3D"font=
-size: 10px">fish | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/art/" style=3D"font-=
size: 12px">art | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/computer-science/" s=
tyle=3D"font-size: 14px">computer-science | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/learning/" style=3D"=
font-size: 18px">learning | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/exercism/" style=3D"=
font-size: 10px">exercism | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/challenge/" style=3D=
"font-size: 10px">challenge | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/story/" style=3D"fon=
t-size: 10px">story | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/standard-library/" s=
tyle=3D"font-size: 14px">standard-library | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/defaultdict/" style=
=3D"font-size: 10px">defaultdict | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/generative/" style=
=3D"font-size: 10px">generative | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/advanced/" style=3D"=
font-size: 10px">advanced | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/negotiating/" style=
=3D"font-size: 10px">negotiating | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/julia/" style=3D"fon=
t-size: 10px">julia | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/practical/" style=3D=
"font-size: 10px">practical | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/rust/" style=3D"font=
-size: 12px">rust | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/iterators/" style=3D=
"font-size: 10px">iterators | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/cli/" style=3D"font-=
size: 12px">cli | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/binary/" style=3D"fo=
nt-size: 10px">binary | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/readability/" style=
=3D"font-size: 10px">readability | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/types/" style=3D"fon=
t-size: 10px">types | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/awk/" style=3D"font-=
size: 10px">awk | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/cron/" style=3D"font=
-size: 12px">cron | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/dotfiles/" style=3D"=
font-size: 10px">dotfiles | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/java/" style=3D"font=
-size: 10px">java | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/projects/" style=3D"=
font-size: 10px">projects | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/brainstorming/" styl=
e=3D"font-size: 10px">brainstorming | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/steganography/" styl=
e=3D"font-size: 10px">steganography | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/typescript/" style=
=3D"font-size: 10px">typescript | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/models/" style=3D"fo=
nt-size: 10px">models | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/architecture/" style=
=3D"font-size: 10px">architecture | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/devjournal/" style=
=3D"font-size: 10px">devjournal | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/resume/" style=3D"fo=
nt-size: 10px">resume | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/career/" style=3D"fo=
nt-size: 10px">career | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/netlify/" style=3D"f=
ont-size: 10px">netlify | </a>
       =20
        <a href=3D"https://www.assertnotmagic.com/tags/automation/" style=
=3D"font-size: 10px">automation | </a>
       =20
      </p>
    </div>
  </div>
  <hr>
 =20

  <p class=3D"rss-subscribe contact">Like my stuff?  Have questions or feed=
back for me?  Want to mentor me or get my help with something?  <a href=3D"=
https://www.assertnotmagic.com/about/">Get in touch!</a>  To stay updated, =
subscribe <a href=3D"https://www.assertnotmagic.com/feed.xml">via RSS</a></=
p>




   =20
       =20
   =20
</article>
    </div>

    <footer id=3D"main-footer">
    <div class=3D"container">
        <p class=3D"text-muted">=C2=A9 Ryan Palo 2020 | All things.  Phil. =
4:13</p>
    </div>
</footer>
    <!-- Scripts -->
   =20
   =20
   =20
   =20



</body></html>
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-749fcd5b-06a0-46f0-9eeb-249511f95c4d@mhtml.blink

@charset "utf-8";

.MathJax_Hover_Frame { border-radius: 0.25em; box-shadow: rgb(136, 51, 170)=
 0px 0px 15px; display: inline-block; position: absolute; border: 1px solid=
 rgb(170, 102, 221) !important; }

.MathJax_Menu_Button .MathJax_Hover_Arrow { position: absolute; cursor: poi=
nter; display: inline-block; border: 2px solid rgb(170, 170, 170); border-r=
adius: 4px; font-family: "Courier New", Courier; font-size: 9px; color: rgb=
(240, 240, 240); }

.MathJax_Menu_Button .MathJax_Hover_Arrow span { display: block; background=
-color: rgb(170, 170, 170); border: 1px solid; border-radius: 3px; line-hei=
ght: 0; padding: 4px; }

.MathJax_Hover_Arrow:hover { color: white !important; border: 2px solid rgb=
(204, 204, 204) !important; }

.MathJax_Hover_Arrow:hover span { background-color: rgb(204, 204, 204) !imp=
ortant; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-e7b03bb0-9796-4101-8023-1d345fd3e4b2@mhtml.blink

@charset "utf-8";

#MathJax_About { position: fixed; left: 50%; width: auto; text-align: cente=
r; border: 3px outset; padding: 1em 2em; background-color: rgb(221, 221, 22=
1); color: black; cursor: default; font-family: message-box; font-size: 120=
%; font-style: normal; text-indent: 0px; text-transform: none; line-height:=
 normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: norma=
l; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; box=
-shadow: rgb(128, 128, 128) 0px 10px 20px; }

#MathJax_About.MathJax_MousePost { outline: none; }

.MathJax_Menu { position: absolute; background-color: white; color: black; =
width: auto; padding: 2px; border: 1px solid rgb(204, 204, 204); margin: 0p=
x; cursor: default; font: 400 12px "Segoe UI"; text-align: left; text-inden=
t: 0px; text-transform: none; letter-spacing: normal; word-spacing: normal;=
 overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; box=
-shadow: rgb(128, 128, 128) 0px 10px 20px; }

.MathJax_MenuItem { padding: 2px 2em; background: transparent; }

.MathJax_MenuArrow { position: absolute; right: 0.5em; padding-top: 0.25em;=
 color: rgb(102, 102, 102); font-size: 0.75em; }

.MathJax_MenuActive .MathJax_MenuArrow { color: white; }

.MathJax_MenuArrow.RTL { left: 0.5em; right: auto; }

.MathJax_MenuCheck { position: absolute; left: 0.7em; }

.MathJax_MenuCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuRadioCheck { position: absolute; left: 1em; }

.MathJax_MenuRadioCheck.RTL { right: 1em; left: auto; }

.MathJax_MenuLabel { padding: 2px 2em 4px 1.33em; font-style: italic; }

.MathJax_MenuRule { border-top: 1px solid rgb(204, 204, 204); margin: 4px 1=
px 0px; }

.MathJax_MenuDisabled { color: graytext; }

.MathJax_MenuActive { background-color: highlight; color: highlighttext; }

.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus { background-color: r=
gb(232, 232, 232); }

.MathJax_ContextMenu:focus { outline: none; }

.MathJax_ContextMenu .MathJax_MenuItem:focus { outline: none; }

#MathJax_AboutClose { top: 0.2em; right: 0.2em; }

.MathJax_Menu .MathJax_MenuClose { top: -10px; left: -10px; }

.MathJax_MenuClose { position: absolute; cursor: pointer; display: inline-b=
lock; border: 2px solid rgb(170, 170, 170); border-radius: 18px; font-famil=
y: "Courier New", Courier; font-size: 24px; color: rgb(240, 240, 240); }

.MathJax_MenuClose span { display: block; background-color: rgb(170, 170, 1=
70); border: 1.5px solid; border-radius: 18px; line-height: 0; padding: 8px=
 0px 6px; }

.MathJax_MenuClose:hover { color: white !important; border: 2px solid rgb(2=
04, 204, 204) !important; }

.MathJax_MenuClose:hover span { background-color: rgb(204, 204, 204) !impor=
tant; }

.MathJax_MenuClose:hover:focus { outline: none; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-76b00f78-0cc8-4eea-9125-cefa1586f04a@mhtml.blink

@charset "utf-8";

.MathJax_Preview .MJXf-math { color: inherit !important; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-4ffe2777-3699-438c-939f-f90594e7ffee@mhtml.blink

@charset "utf-8";

.MJX_Assistive_MathML { top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px)=
; user-select: none; position: absolute !important; padding: 1px 0px 0px !i=
mportant; border: 0px !important; height: 1px !important; width: 1px !impor=
tant; overflow: hidden !important; display: block !important; }

.MJX_Assistive_MathML.MJX_Assistive_MathML_Block { width: 100% !important; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-47861d86-a25e-405a-badb-61496b7c0488@mhtml.blink

@charset "utf-8";

#MathJax_Zoom { position: absolute; background-color: rgb(240, 240, 240); o=
verflow: auto; display: block; z-index: 301; padding: 0.5em; border: 1px so=
lid black; margin: 0px; font-weight: normal; font-style: normal; text-align=
: left; text-indent: 0px; text-transform: none; line-height: normal; letter=
-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space:=
 nowrap; float: none; box-sizing: content-box; box-shadow: rgb(170, 170, 17=
0) 5px 5px 15px; }

#MathJax_ZoomOverlay { position: absolute; left: 0px; top: 0px; z-index: 30=
0; display: inline-block; width: 100%; height: 100%; border: 0px; padding: =
0px; margin: 0px; background-color: white; opacity: 0; }

#MathJax_ZoomFrame { position: relative; display: inline-block; height: 0px=
; width: 0px; }

#MathJax_ZoomEventTrap { position: absolute; left: 0px; top: 0px; z-index: =
302; display: inline-block; border: 0px; padding: 0px; margin: 0px; backgro=
und-color: white; opacity: 0; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-3b19265a-3ac5-49ab-88fb-29a5d0281355@mhtml.blink

@charset "utf-8";

.MathJax_Preview { color: rgb(136, 136, 136); }

#MathJax_Message { position: fixed; left: 1em; bottom: 1.5em; background-co=
lor: rgb(230, 230, 230); border: 1px solid rgb(149, 149, 149); margin: 0px;=
 padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto;=
 white-space: nowrap; }

#MathJax_MSIE_Frame { position: absolute; top: 0px; left: 0px; width: 0px; =
z-index: 101; border: 0px; margin: 0px; padding: 0px; }

.MathJax_Error { color: rgb(204, 0, 0); font-style: italic; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-61a49268-261e-4574-91d8-5b771974bae1@mhtml.blink

@charset "utf-8";

.MJXp-script { font-size: 0.8em; }

.MJXp-right { transform-origin: right center; }

.MJXp-bold { font-weight: bold; }

.MJXp-italic { font-style: italic; }

.MJXp-scr { font-family: MathJax_Script, "Times New Roman", Times, STIXGene=
ral, serif; }

.MJXp-frak { font-family: MathJax_Fraktur, "Times New Roman", Times, STIXGe=
neral, serif; }

.MJXp-sf { font-family: MathJax_SansSerif, "Times New Roman", Times, STIXGe=
neral, serif; }

.MJXp-cal { font-family: MathJax_Caligraphic, "Times New Roman", Times, STI=
XGeneral, serif; }

.MJXp-mono { font-family: MathJax_Typewriter, "Times New Roman", Times, STI=
XGeneral, serif; }

.MJXp-largeop { font-size: 150%; }

.MJXp-largeop.MJXp-int { vertical-align: -0.2em; }

.MJXp-math { display: inline-block; line-height: 1.2; text-indent: 0px; fon=
t-family: "Times New Roman", Times, STIXGeneral, serif; white-space: nowrap=
; border-collapse: collapse; }

.MJXp-display { display: block; text-align: center; margin: 1em 0px; }

.MJXp-math span { display: inline-block; }

.MJXp-box { text-align: center; display: block !important; }

.MJXp-box::after { content: " "; }

.MJXp-rule { margin-top: 0.1em; display: block !important; }

.MJXp-char { display: block !important; }

.MJXp-mo { margin: 0px 0.15em; }

.MJXp-mfrac { margin: 0px 0.125em; vertical-align: 0.25em; }

.MJXp-denom { width: 100%; display: inline-table !important; }

.MJXp-denom > * { display: table-row !important; }

.MJXp-surd { vertical-align: top; }

.MJXp-surd > * { display: block !important; }

.MJXp-script-box > * { height: 50%; display: table !important; }

.MJXp-script-box > * > * { vertical-align: top; display: table-cell !import=
ant; }

.MJXp-script-box > :last-child > * { vertical-align: bottom; }

.MJXp-script-box > * > * > * { display: block !important; }

.MJXp-mphantom { visibility: hidden; }

.MJXp-munderover { display: inline-table !important; }

.MJXp-over { text-align: center; display: inline-block !important; }

.MJXp-over > * { display: block !important; }

.MJXp-munderover > * { display: table-row !important; }

.MJXp-mtable { vertical-align: 0.25em; margin: 0px 0.125em; }

.MJXp-mtable > * { vertical-align: middle; display: inline-table !important=
; }

.MJXp-mtr { display: table-row !important; }

.MJXp-mtd { text-align: center; padding: 0.5em 0px 0px 0.5em; display: tabl=
e-cell !important; }

.MJXp-mtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-mlabeledtr { display: table-row !important; }

.MJXp-mlabeledtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mlabeledtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0);=
 border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; fo=
nt-size: 90%; }

.MJXp-scale0 { transform: scaleX(0); }

.MJXp-scale1 { transform: scaleX(0.1); }

.MJXp-scale2 { transform: scaleX(0.2); }

.MJXp-scale3 { transform: scaleX(0.3); }

.MJXp-scale4 { transform: scaleX(0.4); }

.MJXp-scale5 { transform: scaleX(0.5); }

.MJXp-scale6 { transform: scaleX(0.6); }

.MJXp-scale7 { transform: scaleX(0.7); }

.MJXp-scale8 { transform: scaleX(0.8); }

.MJXp-scale9 { transform: scaleX(0.9); }

.MathJax_PHTML .noError { font-size: 90%; text-align: left; color: black; p=
adding: 1px 3px; border: 1px solid; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-3c669f38-d931-4600-9a64-71e3868c9507@mhtml.blink

@charset "utf-8";

.bmc-button img { width: 27px !important; margin-bottom: 1px !important; bo=
x-shadow: none !important; border: none !important; vertical-align: middle =
!important; }

.bmc-button { margin: 0px 0px 0px 15px; text-decoration: none !important; d=
isplay: inline-flex !important; color: rgb(0, 0, 0) !important; background-=
color: rgb(255, 206, 56) !important; border-radius: 3px !important; border:=
 1px solid transparent !important; padding: 0px 9px !important; font-size: =
17px !important; letter-spacing: -0.08px !important; box-shadow: rgba(190, =
190, 190, 0.5) 0px 1px 2px 2px !important; font-family: Lato, sans-serif !i=
mportant; box-sizing: border-box !important; transition: all 0.3s linear 0s=
 !important; }

.bmc-button:hover, .bmc-button:active, .bmc-button:focus { text-decoration:=
 none !important; box-shadow: rgba(190, 190, 190, 0.5) 0px 1px 2px 2px !imp=
ortant; opacity: 0.85 !important; color: rgb(0, 0, 0) !important; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.assertnotmagic.com/css/main.css

@charset "utf-8";

@import url("https://fonts.googleapis.com/css?family=3DLato:400,400i|Patric=
k+Hand+SC");

@import url("https://fonts.googleapis.com/css?family=3DLato:400,400i,700|Pa=
trick+Hand+SC");

html { font-family: Lato, Palatino, Arial, Helvetica, sans-serif; font-size=
: 19px; letter-spacing: 1.5px; line-height: 1.5em; }

header h1 { color: rgb(236, 236, 236); font-family: "Patrick Hand SC", "Cou=
rier New"; font-size: 3em; line-height: 2.1em; text-shadow: rgba(0, 0, 0, 0=
.2) 3px 4px 0px; }

header .magic-code { text-align: left; }

nav { letter-spacing: 1px; }

nav a { color: rgb(236, 236, 236); text-transform: uppercase; text-decorati=
on: none; }

li.logo a { color: rgb(236, 236, 236); font-family: "Patrick Hand SC", mono=
space; text-transform: lowercase; font-weight: 400; font-size: 25px; }

.site-wrap h1 { font-family: "Patrick Hand SC", Arial, Helvetica, sans-seri=
f; font-size: 3em; font-variant-ligatures: none; line-height: 1.5em; border=
-bottom: 1px solid rgb(204, 204, 204); padding-top: 10px; padding-bottom: 2=
0px; }

.site-wrap h2 { font-family: "Patrick Hand SC", Arial, Helvetica, sans-seri=
f; font-variant-ligatures: none; font-size: 2em; line-height: 1.5em; text-a=
lign: center; padding-top: 10px; padding-bottom: 10px; }

.site-wrap h3 { font-style: italic; padding-top: 5px; padding-bottom: 10px;=
 font-size: 1.5em; text-align: center; }

.site-wrap small { font-size: 14px; color: rgb(128, 128, 128); }

.site-wrap a { text-decoration: none; color: rgb(231, 85, 44); }

.site-wrap code { font-size: 0.8em; background-color: rgb(255, 238, 238); }

.site-wrap .highlight code { background-color: inherit; padding: 0px; }

.site-wrap blockquote { color: rgb(51, 51, 51); font-style: italic; padding=
-left: 4vw; border-left: 3px solid rgb(17, 17, 17); }

.contact { font-weight: bold; }

.post-title { font-size: 1.5em; }

em em, blockquote em { font-style: normal; }

@media only screen and (max-width: 768px) {
  body blockquote { padding-left: 3vw; margin-left: 0px; margin-right: 0px;=
 }
  body .highlight code { line-height: 70%; text-align: left; letter-spacing=
: 0px; }
  body .code-toolbar { margin-left: -20px; margin-right: -20px; }
  body pre.line-numbers { padding-left: 2em; }
  body .logo { display: none; }
  body table { overflow-x: scroll; }
  body .mobile-home { display: block; background: rgb(2, 5, 9); color: rgb(=
236, 236, 236); text-align: center; font-family: "Patrick Hand SC", monospa=
ce; font-size: 2.5em; line-height: 1.5em; }
  body header { display: none; }
  body nav { position: relative; }
  body nav .fixed-nav { position: relative; }
  body nav ul { flex-direction: column; }
  body .site-wrap { margin: auto; padding: 20px; max-width: 100vw; }
  body .site-wrap h1 { font-size: 2.5em; }
  body .site-wrap h2 { font-size: 1.5em; line-height: 1.25em; }
  body .site-wrap img { max-width: 100vw; margin-left: -20px; margin-right:=
 -20px; }
  body .site-wrap iframe { max-width: 70vw; }
  body #home-footer { flex-direction: column; }
}

.mobile-home { display: none; }

.site-wrap img { margin: auto; display: block; max-height: 500px; max-width=
: 40vw; }

.site-wrap iframe { margin: auto; display: block; max-width: 40vw; }

.profile { border-radius: 50%; width: 20vh; }

.post .img-small { max-height: 150px; margin: 5px; }

.highlight table td { padding: 5px; }

.highlight table pre { margin: 0px; }

.highlight span.c, .highlight .cd { color: rgb(163, 165, 153); font-style: =
italic; }

.highlight .p { color: rgb(255, 206, 56); }

.highlight .cm { color: rgb(163, 165, 153); font-style: italic; }

.highlight .c1 { color: rgb(163, 165, 153); font-style: italic; }

.highlight .cp { color: rgb(163, 165, 153); font-weight: normal; }

.highlight .cs { color: rgb(163, 165, 153); font-weight: normal; font-style=
: italic; }

.highlight .err { color: rgb(231, 85, 44); background-color: rgb(2, 5, 9); =
}

.highlight .gi { color: rgb(236, 236, 236); background-color: rgb(2, 5, 9);=
 }

.highlight .gd { color: rgb(236, 236, 236); background-color: rgb(2, 5, 9);=
 }

.highlight .ge { color: rgb(0, 0, 0); font-style: italic; }

.highlight .gr { color: rgb(231, 85, 44); }

.highlight .gt { color: rgb(231, 85, 44); }

.highlight .gh { color: rgb(163, 165, 153); }

.highlight .go { color: rgb(163, 165, 153); }

.highlight .gp { color: rgb(163, 165, 153); }

.highlight .gs { font-weight: normal; }

.highlight .gu { color: rgb(163, 165, 153); }

.highlight .k, .highlight .kv { color: rgb(37, 128, 57); font-weight: norma=
l; }

.highlight .kc { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .kd { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .kp { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .kr { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .kt { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .kn { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .ow { color: rgb(255, 206, 56); font-weight: normal; }

.highlight .o { color: rgb(255, 206, 56); font-weight: normal; }

.highlight .mf { color: rgb(231, 85, 44); }

.highlight .mh { color: rgb(231, 85, 44); }

.highlight .il { color: rgb(231, 85, 44); }

.highlight .mi { color: rgb(231, 85, 44); }

.highlight .mo { color: rgb(231, 85, 44); }

.highlight .m, .highlight .mb, .highlight .mx { color: rgb(231, 85, 44); }

.highlight .se { color: rgb(231, 85, 44); }

.highlight .sb { color: rgb(231, 85, 44); }

.highlight .sc { color: rgb(231, 85, 44); }

.highlight .sd { color: rgb(231, 85, 44); }

.highlight .s2 { color: rgb(231, 85, 44); }

.highlight .sh { color: rgb(231, 85, 44); }

.highlight .si { color: rgb(231, 85, 44); }

.highlight .sx { color: rgb(231, 85, 44); }

.highlight .sr { color: rgb(231, 85, 44); }

.highlight .s1 { color: rgb(231, 85, 44); font-style: italic; }

.highlight .ss { color: rgb(231, 85, 44); }

.highlight .s { color: rgb(231, 85, 44); font-style: italic; }

.highlight .na { color: rgb(92, 197, 239); }

.highlight .nc { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .nd { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .ne { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .nf { color: rgb(92, 197, 239); font-weight: normal; }

.highlight .no { color: rgb(255, 206, 56); }

.highlight .bp { color: rgb(236, 236, 236); font-style: italic; }

.highlight .nb { color: rgb(236, 236, 236); }

.highlight .ni { color: rgb(236, 236, 236); }

.highlight .nn { color: rgb(236, 236, 236); }

.highlight .vc { color: rgb(236, 236, 236); }

.highlight .vg { color: rgb(236, 236, 236); }

.highlight .vi { color: rgb(236, 236, 236); }

.highlight .nv { color: rgb(236, 236, 236); }

.highlight .w { color: rgb(236, 236, 236); }

.highlight .nl { color: rgb(236, 236, 236); font-weight: normal; }

.highlight .nt { color: rgb(92, 197, 239); }

.highlight { color: rgb(236, 236, 236); background-color: rgb(2, 5, 9); }

@-webkit-keyframes wiggle {=20
  0% { transform: rotate(0deg); }
  2% { transform: rotate(5deg); }
  7% { transform: rotate(-5deg); }
  10% { transform: rotate(0deg); }
  100% { transform: rotate(0deg); }
}

@keyframes wiggle {=20
  0% { transform: rotate(0deg); }
  2% { transform: rotate(5deg); }
  7% { transform: rotate(-5deg); }
  10% { transform: rotate(0deg); }
  100% { transform: rotate(0deg); }
}

.email-background { width: 100%; background-color: rgb(92, 197, 239); box-s=
hadow: rgb(163, 165, 153) 5px 5px 0px 0px; padding: 50px; margin: 40px auto=
; }

@media (max-width: 800px) {
  .email-background { padding: 50px 10px; }
}

.email-signup { background-color: rgb(255, 255, 255); padding: 10px; text-a=
lign: center; }

.email-text { font-weight: bold; }

.email-input { font-size: 20px; width: 50%; }

@media (max-width: 800px) {
  .email-input { width: 95%; display: block; margin: 20px auto; border: 1px=
 solid rgb(163, 165, 153); }
}

.email-button { font-size: 20px; padding: 10px; border: none; background-co=
lor: rgb(255, 206, 56); color: rgb(2, 5, 9); border-radius: 3px; cursor: po=
inter; transition: all 0.5s ease 0s; transform: rotate(0deg); animation: 5s=
 ease-in-out 5s infinite normal none running wiggle; }

@media (max-width: 800px) {
  .email-button { animation: 0s ease 0s 1 normal none running none; }
}

.email-button:hover { font-size: 24px; background-color: rgb(255, 219, 107)=
; }

.email-powered { font-size: 10px; color: rgb(163, 165, 153); }

.category-label { display: inline-block; width: 20%; padding: 0px 5px; text=
-align: center; font-size: 0.8em; }

.cat-tech { background-color: rgba(52, 77, 144, 0.6); color: rgb(236, 236, =
236); }

.cat-watercooler { background-color: rgba(92, 197, 239, 0.6); }

.cat-devjournal { background-color: rgba(231, 85, 44, 0.6); }

.cat-personal { background-color: rgba(37, 128, 57, 0.6); }

html { box-sizing: border-box; background: rgb(236, 236, 236); position: re=
lative; min-height: 100%; }

body { margin: 0px; }

*, ::before, ::after { box-sizing: inherit; }

nav { background: rgb(52, 77, 144); top: 0px; width: 100%; box-shadow: rgba=
(0, 0, 0, 0.1) 0px 5px 0px; z-index: 1; }

nav ul { margin: 0px; padding: 0px; list-style: none; display: flex; flex-w=
rap: wrap; }

nav li { flex: 1 1 0%; text-align: center; display: flex; justify-content: =
center; align-items: center; }

nav li:nth-child(3) { background-color: rgb(92, 197, 239); }

nav li:nth-child(3) a { color: rgb(2, 5, 9); }

nav li:nth-child(4) { background-color: rgb(255, 206, 56); }

nav li:nth-child(4) a { color: rgb(2, 5, 9); }

nav li:nth-child(5) { background-color: rgb(231, 85, 44); }

nav li:nth-child(5) a { color: rgb(2, 5, 9); }

nav li:nth-child(6) { background-color: rgb(236, 236, 236); }

nav li:nth-child(6) a { color: rgb(2, 5, 9); }

li.logo { max-width: 500px; overflow: hidden; transition: all 0.5s ease 0s;=
 background-color: rgb(2, 5, 9); }

nav a { padding: 20px; display: inline-block; }

.site-wrap { max-width: 1100px; margin: 100px auto; background: white; padd=
ing: 70px 150px; text-align: left; box-shadow: rgba(0, 0, 0, 0.5) 0px 0px 1=
0px 5px; }

.site-wrap #cover { max-width: 100%; }

.site-wrap .contact-link { display: inline; max-height: 50px; max-width: 50=
px; }

.site-wrap .post-list { list-style: none; }

.site-wrap ul { list-style-position: outside; }

.site-wrap .dotted { list-style-type: disc; padding-left: 20px; }

.site-wrap .dotted li { padding-bottom: 10px; }

.search { font-size: 1.5em; font-family: "Patrick Hand SC", Arial, Helvetic=
a, sans-serif; color: rgb(52, 77, 144); border: 3px solid rgb(92, 197, 239)=
; width: 80%; display: block; margin: 15px auto; }

table { margin: auto; font-size: 0.8em; background-color: rgb(2, 5, 9); }

thead { background-color: rgb(187, 189, 180); }

th { padding: 5px 10px; }

td { text-align: right; background-color: rgb(236, 236, 236); }

body { margin-bottom: 60px; }

#main-footer { position: absolute; bottom: 0px; width: 100%; height: 60px; =
background-color: rgb(2, 5, 9); font-size: 14px; letter-spacing: 1px; }

.container .text-muted { margin-left: 20px; color: rgb(204, 204, 204); }

.post { padding: 10px; text-align: left; border-bottom: 1px solid rgb(170, =
170, 170); }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Lato:400,400i|Patrick+Hand+SC

@charset "utf-8";

@font-face { font-family: Lato; font-style: italic; font-weight: 400; src: =
local("Lato Italic"), local("Lato-Italic"), url("https://fonts.gstatic.com/=
s/lato/v17/S6u8w4BMUTPHjxsAUi-qJCY.woff2") format("woff2"); unicode-range: =
U+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+=
2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: italic; font-weight: 400; src: =
local("Lato Italic"), local("Lato-Italic"), url("https://fonts.gstatic.com/=
s/lato/v17/S6u8w4BMUTPHjxsAXC-q.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Patrick Hand SC"; font-style: normal; font-weigh=
t: 400; src: local("Patrick Hand SC"), local("PatrickHandSC-Regular"), url(=
"https://fonts.gstatic.com/s/patrickhandsc/v8/0nkwC9f7MfsBiWcLtY65AWDK873lg=
SK7FQc.woff2") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-=
129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Patrick Hand SC"; font-style: normal; font-weigh=
t: 400; src: local("Patrick Hand SC"), local("PatrickHandSC-Regular"), url(=
"https://fonts.gstatic.com/s/patrickhandsc/v8/0nkwC9f7MfsBiWcLtY65AWDK873lg=
CK7FQc.woff2") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EF=
F, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Patrick Hand SC"; font-style: normal; font-weigh=
t: 400; src: local("Patrick Hand SC"), local("PatrickHandSC-Regular"), url(=
"https://fonts.gstatic.com/s/patrickhandsc/v8/0nkwC9f7MfsBiWcLtY65AWDK873lj=
iK7.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB=
-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2=
193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Lato:400,400i,700|Patrick+Hand+SC

@charset "utf-8";

@font-face { font-family: Lato; font-style: italic; font-weight: 400; src: =
local("Lato Italic"), local("Lato-Italic"), url("https://fonts.gstatic.com/=
s/lato/v17/S6u8w4BMUTPHjxsAUi-qJCY.woff2") format("woff2"); unicode-range: =
U+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+=
2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: italic; font-weight: 400; src: =
local("Lato Italic"), local("Lato-Italic"), url("https://fonts.gstatic.com/=
s/lato/v17/S6u8w4BMUTPHjxsAXC-q.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 700; src: =
local("Lato Bold"), local("Lato-Bold"), url("https://fonts.gstatic.com/s/la=
to/v17/S6u9w4BMUTPHh6UVSwaPGR_p.woff2") format("woff2"); unicode-range: U+1=
00-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C6=
0-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 700; src: =
local("Lato Bold"), local("Lato-Bold"), url("https://fonts.gstatic.com/s/la=
to/v17/S6u9w4BMUTPHh6UVSwiPGQ.woff2") format("woff2"); unicode-range: U+0-F=
F, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U=
+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Patrick Hand SC"; font-style: normal; font-weigh=
t: 400; src: local("Patrick Hand SC"), local("PatrickHandSC-Regular"), url(=
"https://fonts.gstatic.com/s/patrickhandsc/v8/0nkwC9f7MfsBiWcLtY65AWDK873lg=
SK7FQc.woff2") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-=
129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Patrick Hand SC"; font-style: normal; font-weigh=
t: 400; src: local("Patrick Hand SC"), local("PatrickHandSC-Regular"), url(=
"https://fonts.gstatic.com/s/patrickhandsc/v8/0nkwC9f7MfsBiWcLtY65AWDK873lg=
CK7FQc.woff2") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EF=
F, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Patrick Hand SC"; font-style: normal; font-weigh=
t: 400; src: local("Patrick Hand SC"), local("PatrickHandSC-Regular"), url(=
"https://fonts.gstatic.com/s/patrickhandsc/v8/0nkwC9f7MfsBiWcLtY65AWDK873lj=
iK7.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB=
-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2=
193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.assertnotmagic.com/css/prism.css

@charset "utf-8";

code[class*=3D"language-"], pre[class*=3D"language-"] { color: rgb(204, 204=
, 204); background: none; font-family: Consolas, Monaco, "Andale Mono", "Ub=
untu Mono", monospace; font-size: 1em; text-align: left; white-space: pre; =
word-spacing: normal; word-break: normal; overflow-wrap: normal; line-heigh=
t: 1.5; tab-size: 4; hyphens: none; }

pre[class*=3D"language-"] { padding: 1em; margin: 0.5em 0px; overflow: auto=
; }

:not(pre) > code[class*=3D"language-"], pre[class*=3D"language-"] { backgro=
und: rgb(45, 45, 45); }

:not(pre) > code[class*=3D"language-"] { padding: 0.1em; border-radius: 0.3=
em; white-space: normal; }

.token.comment, .token.block-comment, .token.prolog, .token.doctype, .token=
.cdata { color: rgb(153, 153, 153); }

.token.punctuation { color: rgb(204, 204, 204); }

.token.tag, .token.attr-name, .token.namespace, .token.deleted { color: rgb=
(226, 119, 122); }

.token.function-name { color: rgb(97, 150, 204); }

.token.boolean, .token.number, .token.function { color: rgb(240, 141, 73); =
}

.token.property, .token.class-name, .token.constant, .token.symbol { color:=
 rgb(248, 197, 85); }

.token.selector, .token.important, .token.atrule, .token.keyword, .token.bu=
iltin { color: rgb(204, 153, 205); }

.token.string, .token.char, .token.attr-value, .token.regex, .token.variabl=
e { color: rgb(126, 198, 153); }

.token.operator, .token.entity, .token.url { color: rgb(103, 205, 204); }

.token.important, .token.bold { font-weight: bold; }

.token.italic { font-style: italic; }

.token.entity { cursor: help; }

.token.inserted { color: green; }

pre[data-line] { position: relative; padding: 1em 0px 1em 3em; }

.line-highlight { position: absolute; left: 0px; right: 0px; margin-top: 1e=
m; background: linear-gradient(to right, rgba(153, 122, 102, 0.1) 70%, rgba=
(153, 122, 102, 0)); pointer-events: none; line-height: inherit; white-spac=
e: pre; }

.line-highlight::before, .line-highlight[data-end]::after { content: attr(d=
ata-start); position: absolute; top: 0.4em; left: 0.6em; min-width: 1em; pa=
dding: 0px 0.5em; background-color: rgba(153, 122, 102, 0.4); color: rgb(24=
5, 242, 240); font: bold 65% / 1.5 sans-serif; text-align: center; vertical=
-align: 0.3em; border-radius: 999px; text-shadow: none; box-shadow: white 0=
px 1px; }

.line-highlight[data-end]::after { content: attr(data-end); top: auto; bott=
om: 0.4em; }

.line-numbers .line-highlight::before, .line-numbers .line-highlight::after=
 { content: none; }

pre[class*=3D"language-"].line-numbers { position: relative; padding-left: =
3.8em; counter-reset: linenumber 0; }

pre[class*=3D"language-"].line-numbers > code { position: relative; white-s=
pace: inherit; }

.line-numbers .line-numbers-rows { position: absolute; pointer-events: none=
; top: 0px; font-size: 100%; left: -3.8em; width: 3em; letter-spacing: -1px=
; border-right: 1px solid rgb(153, 153, 153); user-select: none; }

.line-numbers-rows > span { pointer-events: none; display: block; counter-i=
ncrement: linenumber 1; }

.line-numbers-rows > span::before { content: counter(linenumber); color: rg=
b(153, 153, 153); display: block; padding-right: 0.8em; text-align: right; =
}

div.code-toolbar { position: relative; }

div.code-toolbar > .toolbar { position: absolute; top: 0.3em; right: 0.2em;=
 transition: opacity 0.3s ease-in-out 0s; opacity: 0; }

div.code-toolbar:hover > .toolbar { opacity: 1; }

div.code-toolbar > .toolbar .toolbar-item { display: inline-block; }

div.code-toolbar > .toolbar a { cursor: pointer; }

div.code-toolbar > .toolbar button { background: none; border: 0px; color: =
inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; =
font-stretch: inherit; font-size: inherit; font-family: inherit; line-heigh=
t: normal; overflow: visible; padding: 0px; user-select: none; }

div.code-toolbar > .toolbar a, div.code-toolbar > .toolbar button, div.code=
-toolbar > .toolbar span { color: rgb(187, 187, 187); font-size: 0.8em; pad=
ding: 0px 0.5em; background: rgba(224, 224, 224, 0.2); box-shadow: rgba(0, =
0, 0, 0.2) 0px 2px 0px 0px; border-radius: 0.5em; }

div.code-toolbar > .toolbar a:hover, div.code-toolbar > .toolbar a:focus, d=
iv.code-toolbar > .toolbar button:hover, div.code-toolbar > .toolbar button=
:focus, div.code-toolbar > .toolbar span:hover, div.code-toolbar > .toolbar=
 span:focus { color: inherit; text-decoration: none; }

.command-line-prompt { border-right: 1px solid rgb(153, 153, 153); display:=
 block; float: left; font-size: 100%; letter-spacing: -1px; margin-right: 1=
em; pointer-events: none; user-select: none; }

.command-line-prompt > span::before { color: rgb(153, 153, 153); content: "=
 "; display: block; padding-right: 0.8em; }

.command-line-prompt > span[data-user]::before { content: "[" attr(data-use=
r) "@" attr(data-host) "] $"; }

.command-line-prompt > span[data-user=3D"root"]::before { content: "[" attr=
(data-user) "@" attr(data-host) "] #"; }

.command-line-prompt > span[data-prompt]::before { content: attr(data-promp=
t); }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://res.cloudinary.com/duninnjce/image/upload/w_600/brackets.jpg

/9j/4AAQSkZJRgABAQEAZABkAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcU
FhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAEZAlgDASIA
AhEBAxEB/8QAHAABAAEFAQEAAAAAAAAAAAAAAAcBBAUGCAID/8QAUxAAAQMDAQQECAoGBwYGAgMA
AQACAwQFEQYHEiExCBNBURQiM2FxcoGxMjQ1Njd0kaGywRUjQlJz0RYkYnWCs8IXVIOSovAmQ2OT
lOElZLTS8f/EABgBAQEBAQEAAAAAAAAAAAAAAAABAgME/8QAJxEBAQACAQIFBQEBAQAAAAAAAAEC
EQMxcQQyMzRBEiFRscFyoUL/2gAMAwEAAhEDEQA/AOkN495TePeVRFlVd495TePeVREFd495TePe
VREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREF
d495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495
TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePe
VREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREF
d495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495TePeVREFd495
TePeVREFd495TePeVREFd495TePeVREH0gJ66Pj+0PeipB5aP1h70VHhERQEREBFruuNW27R9oNb
cXZe7xYYGnxpXdw83eVlLXXeG2Wkr5InRdfTsndG7mwloJafQmhfItH0LtGtuqrjW29sbqSugkcG
xvdnrWg43gfyW8ICInNARazrPW9m0eynN4klD589XHEzecQOZ5hYKz7U6C71sEFDZb4+KVwYJvBc
tGe0kE4CaEhosZqa4VFpstVW0dBLcaiIDcpojhz8kDhwKii9bXr/AGeNk1y0jNRwPdutdO5zcnnj
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
FR//2Q==

------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Lato&subset=latin,latin-ext

@charset "utf-8";

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg

<svg width=3D"25" height=3D"22" viewBox=3D"0 0 25 22" version=3D"1.1" xmlns=
=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"http://www.w3.org/1999/xlink=
">
<title>Group</title>
<desc>Created using Figma</desc>
<g id=3D"Canvas" transform=3D"translate(-5180 -696)">
<g id=3D"Group">
<g id=3D"Combined Shape">
<use xlink:href=3D"#path0_fill" transform=3D"translate(5201.49 697.468)" fi=
ll=3D"#FFFFFF"/>
</g>
<g id=3D"Logo">
<g id=3D"Fill 1">
<use xlink:href=3D"#path1_fill" transform=3D"translate(5188.19 700.863)" fi=
ll=3D"#FF9100"/>
</g>
<g id=3D"Fill 2">
<use xlink:href=3D"#path2_fill" transform=3D"translate(5188.19 700.863)" fi=
ll=3D"#FFDD00"/>
</g>
<g id=3D"Fill 3">
<use xlink:href=3D"#path3_fill" transform=3D"translate(5186.75 699.413)" fi=
ll=3D"#FFFFFF"/>
</g>
<g id=3D"Stroke 4">
<use xlink:href=3D"#path4_stroke" transform=3D"translate(5186.75 699.413)"/=
>
</g>
<g id=3D"Fill 6">
<use xlink:href=3D"#path5_fill" transform=3D"translate(5188.24 697.056)" fi=
ll=3D"#FFFFFF"/>
</g>
<g id=3D"Group 11">
<g id=3D"Stroke 7">
<use xlink:href=3D"#path6_stroke" transform=3D"translate(5188.24 697.056)" =
fill=3D"#050505"/>
</g>
<g id=3D"Stroke 9">
<use xlink:href=3D"#path7_stroke" transform=3D"translate(5187.29 700.863)"/=
>
</g>
</g>
<g id=3D"Fill 12">
<use xlink:href=3D"#path8_fill" transform=3D"translate(5187.07 705.304)" fi=
ll=3D"#FFFFFF"/>
</g>
<g id=3D"Stroke 13">
<use xlink:href=3D"#path9_stroke" transform=3D"translate(5187.07 705.304)"/=
>
</g>
</g>
<g id=3D"Oval" opacity=3D"0.2">
<mask id=3D"mask0_outline_ins">
<use xlink:href=3D"#path10_fill" fill=3D"white" transform=3D"translate(5180=
.65 701.166)"/>
</mask>
<g mask=3D"url(#mask0_outline_ins)">
<use xlink:href=3D"#path11_stroke_2x" transform=3D"translate(5180.65 701.16=
6)" fill=3D"#FFFFFF"/>
</g>
</g>
<g id=3D"Oval" opacity=3D"0.2">
<use xlink:href=3D"#path12_fill" transform=3D"translate(5200.84 707.692)" f=
ill=3D"#FFFFFF"/>
</g>
<g id=3D"Oval">
<use xlink:href=3D"#path12_fill" transform=3D"translate(5184.56 712.696)" f=
ill=3D"#FFFFFF"/>
</g>
</g>
</g>
<defs>
<path id=3D"path0_fill" fill-rule=3D"evenodd" d=3D"M 1.11914 0.172241C 1.02=
246 0.272827 0.962891 0.409363 0.962891 0.559753L 0.962891 0.962952L 0.5595=
7 0.962952C 0.250488 0.962952 0 1.21356 0 1.52277C 0 1.83191 0.250488 2.082=
52 0.55957 2.08252L 0.962891 2.08252L 0.962891 2.48566C 0.962891 2.7948 1.2=
1338 3.04547 1.52246 3.04547C 1.83203 3.04547 2.08252 2.7948 2.08252 2.4856=
6L 2.08252 2.08252L 2.48584 2.08252C 2.79492 2.08252 3.04541 1.83191 3.0454=
1 1.52277C 3.04541 1.21356 2.79492 0.962952 2.48584 0.962952L 2.08252 0.962=
952L 2.08252 0.559753C 2.08252 0.25061 1.83203 0 1.52246 0C 1.36377 0 1.220=
7 0.06604 1.11914 0.172241Z"/>
<path id=3D"path1_fill" fill-rule=3D"evenodd" d=3D"M 5.02978 0.0305451L 0 0=
L 2.46998 15.7258L 3.00889 15.7258L 7.94885 15.7258L 8.48776 15.7258L 10.95=
77 0L 5.02978 0.0305451Z"/>
<path id=3D"path2_fill" fill-rule=3D"evenodd" d=3D"M 5.02978 0.0305451L 0 0=
L 2.46998 15.7258L 3.00889 15.7258L 6.69141 15.7258L 7.23031 15.7258L 9.700=
3 0L 5.02978 0.0305451Z"/>
<path id=3D"path3_fill" fill-rule=3D"evenodd" d=3D"M 0 1.45021L 12.9786 1.4=
5021L 12.9786 0L 0 0L 0 1.45021Z"/>
<path id=3D"path4_stroke" d=3D"M 0 1.45021L -0.440282 1.45021L -0.440282 1.=
8905L 0 1.8905L 0 1.45021ZM 12.9786 1.45021L 12.9786 1.8905L 13.4189 1.8905=
L 13.4189 1.45021L 12.9786 1.45021ZM 12.9786 0L 13.4189 0L 13.4189 -0.44028=
2L 12.9786 -0.440282L 12.9786 0ZM 0 0L 0 -0.440282L -0.440282 -0.440282L -0=
.440282 0L 0 0ZM 0 1.8905L 12.9786 1.8905L 12.9786 1.00993L 0 1.00993L 0 1.=
8905ZM 13.4189 1.45021L 13.4189 0L 12.5384 0L 12.5384 1.45021L 13.4189 1.45=
021ZM 12.9786 -0.440282L 0 -0.440282L 0 0.440282L 12.9786 0.440282L 12.9786=
 -0.440282ZM -0.440282 0L -0.440282 1.45021L 0.440282 1.45021L 0.440282 0L =
-0.440282 0Z"/>
<path id=3D"path5_fill" fill-rule=3D"evenodd" d=3D"M 8.98176 0L 5.88305 0L =
4.04179 0L 0.943084 0L 0 2.17532L 4.04179 2.17532L 5.88305 2.17532L 9.92484=
 2.17532L 8.98176 0Z"/>
<path id=3D"path6_stroke" d=3D"M 8.98176 0L 9.38571 -0.175129L 9.27076 -0.4=
40282L 8.98176 -0.440282L 8.98176 0ZM 0.943084 0L 0.943084 -0.440282L 0.654=
085 -0.440282L 0.539131 -0.175129L 0.943084 0ZM 0 2.17532L -0.403953 2.0001=
9L -0.670758 2.6156L 0 2.6156L 0 2.17532ZM 9.92484 2.17532L 9.92484 2.6156L=
 10.5956 2.6156L 10.3288 2.00019L 9.92484 2.17532ZM 8.98176 -0.440282L 5.88=
305 -0.440282L 5.88305 0.440282L 8.98176 0.440282L 8.98176 -0.440282ZM 5.88=
305 -0.440282L 4.04179 -0.440282L 4.04179 0.440282L 5.88305 0.440282L 5.883=
05 -0.440282ZM 4.04179 -0.440282L 0.943084 -0.440282L 0.943084 0.440282L 4.=
04179 0.440282L 4.04179 -0.440282ZM 0.539131 -0.175129L -0.403953 2.00019L =
0.403953 2.35045L 1.34704 0.175129L 0.539131 -0.175129ZM 0 2.6156L 4.04179 =
2.6156L 4.04179 1.73504L 0 1.73504L 0 2.6156ZM 4.04179 2.6156L 5.88305 2.61=
56L 5.88305 1.73504L 4.04179 1.73504L 4.04179 2.6156ZM 5.88305 2.6156L 9.92=
484 2.6156L 9.92484 1.73504L 5.88305 1.73504L 5.88305 2.6156ZM 10.3288 2.00=
019L 9.38571 -0.175129L 8.5778 0.175129L 9.52089 2.35045L 10.3288 2.00019Z"=
/>
<path id=3D"path7_stroke" d=3D"M 5.92796 0.0305451L 5.92569 0.470845L 5.930=
23 0.470821L 5.92796 0.0305451ZM 0 0L 0.00226862 -0.440276L -0.515251 -0.44=
2943L -0.43495 0.0683159L 0 0ZM 2.46998 15.7258L 2.03503 15.7941L 2.09346 1=
6.166L 2.46998 16.166L 2.46998 15.7258ZM 9.38594 15.7258L 9.38594 16.166L 9=
.76246 16.166L 9.82089 15.7941L 9.38594 15.7258ZM 11.8559 0L 12.2909 0.0683=
159L 12.3712 -0.442943L 11.8537 -0.440276L 11.8559 0ZM 5.93023 -0.409731L 0=
.00226862 -0.440276L -0.00226862 0.440276L 5.92569 0.470821L 5.93023 -0.409=
731ZM -0.43495 0.0683159L 2.03503 15.7941L 2.90493 15.6574L 0.43495 -0.0683=
159L -0.43495 0.0683159ZM 2.46998 16.166L 3.00889 16.166L 3.00889 15.2855L =
2.46998 15.2855L 2.46998 16.166ZM 3.00889 16.166L 8.84703 16.166L 8.84703 1=
5.2855L 3.00889 15.2855L 3.00889 16.166ZM 8.84703 16.166L 9.38594 16.166L 9=
.38594 15.2855L 8.84703 15.2855L 8.84703 16.166ZM 9.82089 15.7941L 12.2909 =
0.0683159L 11.421 -0.0683159L 8.95099 15.6574L 9.82089 15.7941ZM 11.8537 -0=
.440276L 5.92569 -0.409731L 5.93023 0.470821L 11.8582 0.440276L 11.8537 -0.=
440276Z"/>
<path id=3D"path8_fill" fill-rule=3D"evenodd" d=3D"M 12.2601 0L 6.34287 0L =
5.91723 0L 0 0L 1.10682 6.25405L 6.13005 6.19953L 11.1533 6.25405L 12.2601 =
0Z"/>
<path id=3D"path9_stroke" d=3D"M 12.2601 0L 12.6936 0.0767275L 12.7851 -0.4=
40282L 12.2601 -0.440282L 12.2601 0ZM 0 0L 0 -0.440282L -0.525044 -0.440282=
L -0.433545 0.0767275L 0 0ZM 1.10682 6.25405L 0.673277 6.33077L 0.73833 6.6=
9835L 1.1116 6.6943L 1.10682 6.25405ZM 6.13005 6.19953L 6.13483 5.75917L 6.=
12527 5.75927L 6.13005 6.19953ZM 11.1533 6.25405L 11.1485 6.6943L 11.5218 6=
.69835L 11.5868 6.33077L 11.1533 6.25405ZM 12.2601 -0.440282L 6.34287 -0.44=
0282L 6.34287 0.440282L 12.2601 0.440282L 12.2601 -0.440282ZM 6.34287 -0.44=
0282L 5.91723 -0.440282L 5.91723 0.440282L 6.34287 0.440282L 6.34287 -0.440=
282ZM 5.91723 -0.440282L 0 -0.440282L 0 0.440282L 5.91723 0.440282L 5.91723=
 -0.440282ZM -0.433545 0.0767275L 0.673277 6.33077L 1.54037 6.17732L 0.4335=
45 -0.0767275L -0.433545 0.0767275ZM 1.1116 6.6943L 6.13483 6.63978L 6.1252=
7 5.75927L 1.10204 5.81379L 1.1116 6.6943ZM 6.12527 6.63978L 11.1485 6.6943=
L 11.1581 5.81379L 6.13483 5.75927L 6.12527 6.63978ZM 11.5868 6.33077L 12.6=
936 0.0767275L 11.8266 -0.0767275L 10.7197 6.17732L 11.5868 6.33077Z"/>
<path id=3D"path10_fill" fill-rule=3D"evenodd" d=3D"M 1.845 3.69804C 2.8639=
7 3.69804 3.69001 2.87021 3.69001 1.84902C 3.69001 0.827835 2.86397 0 1.845=
 0C 0.826036 0 0 0.827835 0 1.84902C 0 2.87021 0.826036 3.69804 1.845 3.698=
04Z"/>
<path id=3D"path11_stroke_2x" d=3D"M 1.845 5.11673C 3.6504 5.11673 5.10869 =
3.65082 5.10869 1.84902L 2.27132 1.84902C 2.27132 2.0896 2.07754 2.27936 1.=
845 2.27936L 1.845 5.11673ZM 5.10869 1.84902C 5.10869 0.0472286 3.6504 -1.4=
1869 1.845 -1.41869L 1.845 1.41869C 2.07754 1.41869 2.27132 1.60844 2.27132=
 1.84902L 5.10869 1.84902ZM 1.845 -1.41869C 0.0396073 -1.41869 -1.41869 0.0=
472286 -1.41869 1.84902L 1.41869 1.84902C 1.41869 1.60844 1.61246 1.41869 1=
.845 1.41869L 1.845 -1.41869ZM -1.41869 1.84902C -1.41869 3.65082 0.0396073=
 5.11673 1.845 5.11673L 1.845 2.27936C 1.61246 2.27936 1.41869 2.0896 1.418=
69 1.84902L -1.41869 1.84902Z"/>
<path id=3D"path12_fill" fill-rule=3D"evenodd" d=3D"M 0.868237 1.74026C 1.3=
4775 1.74026 1.73647 1.35069 1.73647 0.870128C 1.73647 0.38957 1.34775 0 0.=
868237 0C 0.388723 0 0 0.38957 0 0.870128C 0 1.35069 0.388723 1.74026 0.868=
237 1.74026Z"/>
</defs>
</svg>=0A
------MultipartBoundary--eUX0CSmQercfS8nJOdEw79jiDmDPolSRBkcOzlXCzD------
